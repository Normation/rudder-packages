#!/usr/bin/make -f
# -*- makefile -*-

# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

REAL_NAME=rudder-agent

BUILD_CFLAGS=$(shell [ -x /usr/bin/dpkg-buildflags ] && /usr/bin/dpkg-buildflags --get CFLAGS )
BUILD_LDFLAGS=$(shell [ -x /usr/bin/dpkg-buildflags ] && /usr/bin/dpkg-buildflags --get LDFLAGS )

# Defaults (use our own openssl 1.1.1, and curl since it depends on it)
USE_HTTPS=true
USE_SYSTEM_OPENSSL=false
USE_SYSTEM_PERL=true
USE_SYSTEM_CURL=false
USE_SYSTEM_AUGEAS=true
USE_SYSTEM_JQ=true
USE_SYSTEM_YAML=true
USE_SYSTEM_XML=true
USE_SYSTEMD=true
USE_PIE=true

ifeq (rudder-agent,$(REAL_NAME))
USE_SYSTEM_FUSION=false
else
USE_SYSTEM_FUSION=true
endif

# add openssl to old distributions
OS_CODENAME := $(shell lsb_release -s -c)
# Ubuntu 10.04
ifeq (lucid,$(OS_CODENAME))
USE_HTTPS=false
USE_SYSTEMD=false
USE_SYSTEM_PERL=false
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
USE_PIE=false
endif
# Ubuntu 12.04
ifeq (precise,$(OS_CODENAME))
USE_SYSTEMD=false
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
USE_PIE=false
endif
# Ubuntu 12.10
ifeq (quantal,$(OS_CODENAME))
USE_SYSTEMD=false
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
USE_PIE=false
endif
# Ubuntu 13.04
ifeq (raring,$(OS_CODENAME))
USE_HTTPS=false
USE_SYSTEMD=false
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
USE_PIE=false
endif
# Ubuntu 14.04
ifeq (trusty,$(OS_CODENAME))
USE_SYSTEMD=false
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
endif
# Ubuntu 15.10
ifeq (wily,$(OS_CODENAME))
USE_PIE=false
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
endif
# Ubuntu 16.04
ifeq (xenial,$(OS_CODENAME))
USE_SYSTEM_AUGEAS=false
endif
# Ubuntu 20.04
ifeq (focal,$(OS_CODENAME))
USE_SYSTEM_OPENSSL=true
USE_SYSTEM_CURL=true
endif

# Debian 5
ifeq (lenny,$(OS_CODENAME))
USE_HTTPS=false
USE_SYSTEMD=false
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
USE_SYSTEM_PERL=false
USE_SYSTEM_YAML=false
USE_SYSTEM_XML=false
USE_PIE=false
endif
# Debian 6
ifeq (squeeze,$(OS_CODENAME))
USE_HTTPS=false
USE_SYSTEMD=false
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
USE_PIE=false
endif
# Debian 7
ifeq (wheezy,$(OS_CODENAME))
USE_SYSTEMD=false
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
USE_PIE=false
endif
# Debian 8
ifeq (jessie,$(OS_CODENAME))
USE_SYSTEM_JQ=false
USE_SYSTEM_AUGEAS=false
endif
# Debian 9
ifeq (stretch,$(OS_CODENAME))
endif
# Debian 10
ifeq (buster,$(OS_CODENAME))
USE_SYSTEM_OPENSSL=true
USE_SYSTEM_CURL=true
endif
# Debian 11
ifeq (bullseye,$(OS_CODENAME))
USE_SYSTEM_OPENSSL=true
USE_SYSTEM_CURL=true
endif


MAKE_OPTIONS=--debug USE_HTTPS=$(USE_HTTPS) USE_SYSTEM_OPENSSL=$(USE_SYSTEM_OPENSSL) USE_SYSTEM_FUSION=$(USE_SYSTEM_FUSION) USE_SYSTEM_PERL=$(USE_SYSTEM_PERL) USE_SYSTEMD=$(USE_SYSTEMD) USE_SYSTEM_CURL=$(USE_SYSTEM_CURL) USE_SYSTEM_AUGEAS=$(USE_SYSTEM_AUGEAS) USE_SYSTEM_JQ=$(USE_SYSTEM_JQ) USE_SYSTEM_YAML=$(USE_SYSTEM_YAML) USE_SYSTEM_XML=$(USE_SYSTEM_XML) USE_PIE=$(USE_PIE)

# manage dependencies
ifeq (true,$(USE_SYSTEM_OPENSSL))
DEPS := $(DEPS), openssl
endif
ifeq (true,$(USE_SYSTEM_PERL))
DEPS := $(DEPS), libxml-treepp-perl, perl
endif
ifeq (true,$(USE_SYSTEM_CURL))
DEPS := $(DEPS), curl
endif
ifeq (true,$(USE_SYSTEM_AUGEAS))
DEPS := $(DEPS), augeas-lenses, augeas-tools
endif
ifeq (true,$(USE_SYSTEM_JQ))
DEPS := $(DEPS), jq
endif
ifeq (true,$(USE_SYSTEM_YAML))
DEPS := $(DEPS), libyaml-0-2
endif
ifeq (true,$(USE_SYSTEM_XML))
DEPS := $(DEPS), libxml2
endif
ifeq (true,$(USE_SYSTEMD))
DEPS := $(DEPS), systemd
endif

configure:

build:
	dh_testdir
	cd SOURCES && $(MAKE) build $(MAKE_OPTIONS) BUILD_CFLAGS="$(BUILD_CFLAGS)" BUILD_LDFLAGS="$(BUILD_LDFLAGS)"

clean:
	dh_testdir
	dh_testroot
	cd SOURCES && $(MAKE) clean $(MAKE_OPTIONS)
	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_installdirs
	cd SOURCES && $(MAKE) install $(MAKE_OPTIONS) BUILD_LDFLAGS="$(BUILD_LDFLAGS)" DESTDIR=$(CURDIR)/debian/tmp
	# remove perl doc
	rm -rf $(CURDIR)/debian/tmp/opt/rudder/man $(CURDIR)/debian/tmp/opt/rudder/lib/perl5/5.22.0/pod
	# let this file be managed by dh_installinit
ifneq (true,$(USE_SYSTEMD))
	mv $(CURDIR)/debian/tmp/etc/init.d/rudder-agent debian/rudder-agent.init
endif

# Build architecture-independent files here.
binary-indep: install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: install
	dh_testdir
	dh_testroot
	dh_installchangelogs
	dh_installdocs
	dh_installexamples
	dh_install
#	dh_installmenu
	dh_installdebconf
#	dh_installlogrotate
#	dh_installmime
#	dh_python
	# Init script and configuration files
ifeq (true,$(USE_SYSTEMD))
	dh_install lib
else
	dh_installinit --no-start -R # restart after upgrade (instead of stop, upgrade, start)
endif
#	dh_installinfo
	dh_installman
	dh_link
	dh_strip
	dh_compress
	dh_fixperms -Xppkeys
#	dh_perl
	dh_makeshlibs
	dh_installdeb
	# LD_LIBRARY_PATH necessary to avoid libcrypto detection problems on old OSes like Ubuntu 10.04
	# Please see https://issues.rudder.io/issues/6337 for details
	LD_LIBRARY_PATH="$(CURDIR)/debian/tmp/opt/rudder/lib:$${LD_LIBRARY_PATH}" dh_shlibdeps -- --ignore-missing-info
	dh_gencontrol -- "-Vrudder:deps=$(DEPS)"
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure
