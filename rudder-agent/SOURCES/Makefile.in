#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

.DEFAULT_GOAL := build

# Versions to use
RUDDER_VERSION_TO_PACKAGE =
RUDDER_MAJOR_VERSION := $(shell echo ${RUDDER_VERSION_TO_PACKAGE} | cut -d'.' -f 1-2)
DEBUG =
ifndef RUDDER_MAJOR_VERSION
$(error RUDDER_VERSION_TO_PACKAGE has not been set)
endif

# Original URL: http://zlib.net/zlib-$(ZLIB_RELEASE).tar.gz
zlib_RELEASE = 1.3.1
zlib_SHA256 = 9a93b2b7dfdac77ceba5a558a580e74667dd6fede4585b91eefb60f03b72df23
# Original URL:  https://git.openldap.org/openldap/openldap/-/archive/LMDB_$(LMDB_RELEASE)/openldap-LMDB_$(LMDB_RELEASE).tar.gz
lmdb_RELEASE = 0.9.32
lmdb_SHA256 = 70d553f80968f5117f2f3d4d7f0b89cb8fb69dadc35131263a2499bb58f7d015
# We follow LTS releases
# Original URL: https://www.openssl.org/source/openssl-$(OPENSSL_RELEASE).tar.gz
openssl_RELEASE = 3.0.17
openssl_SHA256 = dfdd77e4ea1b57ff3a6dbde6b0bdc3f31db5ac99e7fdd4eaf9e1fbb6ec2db8ce
# Original URL: http://pyyaml.org/download/libyaml/yaml-0.2.5.tar.gz
libyaml_RELEASE = 0.2.5
libyaml_SHA256 = c642ae9b75fee120b2d96c712538bd2cf283228d2337df2cf2988e3c02678ef4
# Original URL: ftp://xmlsoft.org/libxml2/libxml2-2.9.7.tar.gz
libxml2_RELEASE = 2.9.14
libxml2_SHA256 = e8655291ee6f20c8abf57854ff0709e8b178c619001a4d850002aafc81885e17
# Original URL: https://curl.haxx.se/download/curl-7.58.0.tar.gz
libcurl_RELEASE = 8.16.0
libcurl_SHA256 = a21e20476e39eca5a4fc5cfb00acf84bbc1f5d8443ec3853ad14c26b3c85b970
# Original URL: https://ftp.gnu.org/gnu/readline/readline-8.0.tar.gz
readline_RELEASE = 8.2
readline_SHA256 = 3feb7171f16a84ee82ca18a36d7b9be109a52c04f492a053331d7d1095007c35
# Original URL: http://download.augeas.net/augeas-1.12.0.tar.gz
augeas_RELEASE = 1.14.1
augeas_SHA256 = 368bfdd782e4b9c7163baadd621359c82b162734864b667051ff6bcb57b9edff
# Original URL: https://github.com/stedolan/jq/releases/download/jq-1.6/jq-1.6.tar.gz
jq_RELEASE = 1.7.1
jq_SHA256 = 478c9ca129fd2e3443fe27314b455e211e0d8c60bc8ff7df703873deeee580c2
# We follow LTS releases
# Original URL: https://cfengine-package-repos.s3.amazonaws.com/tarballs/cfengine-community-$(CFENGINE_RELEASE).tar.gz
cfengine_RELEASE = 3.21.5
cfengine_SHA256 = 98278a47c39ef31eef0b2c96c57f0e6ffdf3c9d7727bb9862d7cbdacc160143d
# Original URL: http://www.cpan.org/src/5.0/perl-$(PERL_RELEASE).tar.gz
perl_RELEASE = 5.36.1
perl_SHA256 = 68203665d8ece02988fc77dc92fccbb297a83a4bb4b8d07558442f978da54cc1
# Original URL: http://www.cpan.org/modules/by-module/App/App-cpanminus-1.7046.tar.gz
cpanminus_RELEASE = 1.7046
cpanminus_SHA256 = 3e8c9d9b44a7348f9acc917163dbfc15bd5ea72501492cea3a35b346440ff862
# Original URL: https://github.com/fusioninventory/fusioninventory-agent/releases/download/2.3.19/FusionInventory-Agent-$(FUSION_RELEASE).tar.gz
fusion_RELEASE = 2.6
fusion_SHA256 = 83e0e350cc82781f1142e4bc8deea901324a23f9d64e8ead80102dfd680a83df

#CPAN_URL = https://www.cpan.org
CPAN_URL = $(HTTPS)://repository.rudder.io/build-dependencies/cpan/$(RUDDER_MAJOR_VERSION)

# Default PATHs
RUDDER_DIR = /opt/rudder
DESTDIR = $(CURDIR)/target

@CONFIG_VARS@

# Pass an empty string to skip hash check
GET=get() { @_GET@ "$$1.part" "$$2" && { openssl dgst -sha256 "$$1.part" | grep -q "$$3" || { echo "Wrong checksum, aborting"; exit 1; }; } && mv "$$1.part" "$$1"; }; get

# do not pass variables to sub make
MAKEOVERRIDES =

################
# Main targets #
################

# Download sources (should not be needed but useful for debug)
source: @SOURCE_DEPS@ cfengine-source cpanminus-source

# build binaries
build: build-agent build-cfengine @fusion_DEP@

# install rudder agent
install: install-agent


##############################
# Source download and unpack #
##############################

@zlib_SOURCE@

@lmdb_SOURCE@

@openssl_SOURCE@

@libyaml_SOURCE@

@libxml2_SOURCE@
	# patch libxml source to work with very old gcc
	cd libxml2-source && $(SED) 's/#ifdef __GNUC__/#if __GNUC__ > 3/' ./timsort.h > ./timsort.h.new && mv ./timsort.h.new ./timsort.h
	cd libxml2-source && $(SED) 's/-Wextra//' configure > configure.new && mv configure.new configure
	cd libxml2-source && $(SED) 's/-Wno-array-bounds//' configure > configure.new && mv configure.new configure && chmod +x configure

@libcurl_SOURCE@

@readline_SOURCE@

@augeas_SOURCE@

@jq_SOURCE@

@cfengine_SOURCE@
	# Apply patches
	for PATCHNAME in patches/cfengine/*.patch; do echo "Applying $$PATCHNAME..."; $(PATCH) -d ./cfengine-source -p1 < $$PATCHNAME || exit ; echo ""; done
	# Make sure there were no rejects
	test `find ./cfengine-source -name \*.rej | wc -l` = 0

@perl_SOURCE@

@cpanminus_SOURCE@

@fusion_SOURCE@
	# Apply patches
	for PATCHNAME in patches/fusioninventory/*.patch; do echo "Applying $$PATCHNAME... on FusionInventory"; $(PATCH) -d ./fusion-source -p1 < $$PATCHNAME || exit; done
	# Make sure there were no rejects
	test `find ./fusion-source -name \*.rej | wc -l` = 0

	# Fix a lsusb invocation that crashes some SLES machines
	find ./fusion-source -name "USB.pm" -exec rm "{}" \;

rudder-sources.tar.bz2:
	$(GET) rudder-sources.tar.bz2 $(HTTPS)://repository.rudder.io/sources/$(RUDDER_VERSION_TO_PACKAGE)/rudder-sources-$(RUDDER_VERSION_TO_PACKAGE).tar.bz2 ""

rudder-sources: rudder-sources.tar.bz2
	bunzip2 < rudder-sources.tar.bz2 | $(TAR) x --no-same-owner --no-same-permissions -f -
	mv rudder-sources-$(RUDDER_VERSION_TO_PACKAGE)*/ rudder-sources/ # the '*' is needed for nightly release
	touch rudder-sources # to make it younger than the bzip source file

rudder.8.gz:
	# Get man page from rudder-project.org (just have an empty man if the page doesnt' exist yet)
	$(GET) rudder.8 $(HTTPS)://docs.rudder.io/man/${RUDDER_MAJOR_VERSION}/rudder.8 "" || touch rudder.8
	gzip -f rudder.8

rudder-agent: rudder-sources
	cp -r ./rudder-sources/rudder-agent ./rudder-agent
	# Add capabilities
	echo cfengine >> ./rudder-agent/agent-capabilities
	echo jq >> ./rudder-agent/agent-capabilities
	echo yaml >> ./rudder-agent/agent-capabilities
	echo xml >> ./rudder-agent/agent-capabilities
	echo curl >> ./rudder-agent/agent-capabilities
	echo http_reporting >> ./rudder-agent/agent-capabilities
ifneq (false,$(USE_ACL))
	echo acl >> ./rudder-agent/agent-capabilities
endif

rudder-agent.cron: rudder-sources
	cp ./rudder-sources/rudder-techniques/techniques/system/common/1.0/rudder-agent-community-cron ./rudder-agent.cron

	# rudder-agent-community-cron is a mustache template that is not rendered at postinstall
	# It needs to be "correctly" built to avoid breaking the cron service
	[ -f /etc/slackware-version ] && perl -0777 -pe 's|\{\{\#classes.slackware}}(.*?)\{\{/classes.slackware}}.*?\{\{\^classes.slackware}}(.*?)\{\{/classes.slackware}}|\1|sg' -i ./rudder-agent.cron || true
	[ ! -f /etc/slackware-version ] &&  perl -0777 -pe 's|\{\{\#classes.slackware}}(.*?)\{\{/classes.slackware}}.*?\{\{\^classes.slackware}}(.*?)\{\{/classes.slackware}}|\2|sg' -i ./rudder-agent.cron || true
	perl -0777 -pe 's|\{\{\{vars.setup_cronjob.cron_prefix\}\}\}|0,5,10,15,20,25,30,35,40,45,50,55 * * * *|sg' -i ./rudder-agent.cron

	# Set unexpanded variables of the cron file
	$(SED) 's@\$${sys.workdir}@/var/rudder/cfengine-community@g' rudder-agent.cron | $(SED) 's@\$${g.rudder_base}@/opt/rudder@g' | $(SED) 's@\\&\\&@\&\&@g' | $(SED) 's@\\&1@\&1@g' > rudder-agent.cron.new
	mv rudder-agent.cron.new rudder-agent.cron

debug-script/rudder-debug-info:
	cd debug-script && $(MAKE)


########################
# Build each component #
########################

RUST_TARGET = rudder-sources/rudder/target/release
CARGO_FEATURES=""
ifneq (false,$(USE_APT))
CARGO_FEATURES="apt"
endif
export CARGO_FEATURES

build-agent: rudder-sources
ifneq (false,$(USE_RUST))
	# The deps versions are in the Cargo.lock in the repo root
	DEPS_SOURCE_SHA=$$(ls -1 rudder-sources/rudder/Cargo.* | sort | xargs openssl dgst -sha256 | openssl dgst -sha256 | awk '{print $$2}') ;\
	AGENT_SOURCE_SHA=$$(find rudder-sources/rudder/policies -type f | sort | xargs openssl dgst -sha256 | openssl dgst -sha256 | awk '{print $$2}') ;\
	CACHE_SHA=$$(echo "$$DEPS_SOURCE_SHA $$AGENT_SOURCE_SHA" | openssl dgst -sha256 | awk '{print $$2}') ;\
	AGENT_CACHE_PARAMETERS="--with-env name=rudder-agent source=$${CACHE_SHA}}" ;\
	if ! ../../build-caching get $(RUST_TARGET)/ $${AGENT_CACHE_PARAMETERS}; then \
		cd rudder-sources/rudder/policies/module-types/system-updates && make build || exit 1 ;\
		cd $(CURDIR); ../../build-caching put $(RUST_TARGET)/ $${AGENT_CACHE_PARAMETERS} || true ;\
	fi
endif
	touch $@

build-zlib: zlib-source
	cd zlib-source && $(BUILD_FLAGS_LIB) @ZLIB_ARGS@ ./configure --prefix=$(RUDDER_DIR)
	cd zlib-source && $(MAKE) LDSHAREDLIBC=
	cd zlib-source && $(MAKE) install DESTDIR=$(CURDIR)/dependencies
	touch $@

build-lmdb: lmdb-source
	# lmdb doesn't support CFLAGS (it overrides its own) so we pass XCFLAGS instead, that is appended to the original ones
	# lmdb also mixes cflags and ldflags
	cd lmdb-source/libraries/liblmdb && $(MAKE) XCFLAGS="$(CFLAGS)" LDFLAGS="$(LDFLAGS) $(CFLAGS) $(LMDB_LDFLAGS)" $(LMDB_MAKEFLAGS)
	# need a temporary install for cfengine
	mkdir -p dependencies$(RUDDER_DIR)
	# LMDB's Makefile does not know how to create destination files, do it ourselves
	cd dependencies$(RUDDER_DIR) && mkdir -p bin lib include man/man1
	cd lmdb-source/libraries/liblmdb && $(MAKE) install prefix=$(RUDDER_DIR) DESTDIR=$(CURDIR)/dependencies
	touch $@

build-openssl: openssl-source @perl_DEP@
	# openssl doesn't support CFLAGS (it overrides its own) so we must pass them in batch to configure
	cd openssl-source && RELEASE="" @SSL_CONFIGURE@ -fPIC $(CFLAGS) $(LDFLAGS) $(PIE_LDFLAGS) --libdir=lib --prefix=$(RUDDER_DIR) --openssldir=$(RUDDER_DIR)/openssl shared no-idea no-rc5 no-ssl3 no-dtls no-psk no-srp no-engine enable-egd no-tests
	cd openssl-source && $(MAKE) depend
	cd openssl-source && $(MAKE)
	slibclean >/dev/null 2>&1 || true
	cd openssl-source && $(MAKE) install DESTDIR=$(CURDIR)/dependencies
	touch $@

build-libyaml: libyaml-source
	cd libyaml-source && ./configure --prefix=$(RUDDER_DIR) --enable-gettext=no $(BUILD_FLAGS_LIB)
	cd libyaml-source && $(MAKE)
	# install to a temporary location is needed to build cfengine
	cd libyaml-source && $(MAKE) install DESTDIR=$(CURDIR)/dependencies
	touch $@

build-libxml2: libxml2-source @zlib_DEP@
	cd libxml2-source && ./configure --prefix=$(RUDDER_DIR) @LIBXML2_ARGS@ --with-xpath --with-c14n --without-catalog --without-debug --without-docbook --without-ftp --without-http --without-html --without-iconv --without-python --enable-shared --disable-static $(BUILD_FLAGS_LIB)
	cd libxml2-source && $(MAKE)
	cd libxml2-source && $(MAKE) install DESTDIR=$(CURDIR)/dependencies
	touch $@

build-libcurl: libcurl-source @openssl_DEP@ @zlib_DEP@
	# pkcconfig give openssl build configuration, but it point to final installation path (/opt/rudder)
	# since we need the temporary path during build we need to add -I and -L
	cd libcurl-source && ./configure --prefix=$(RUDDER_DIR) @LIBCURL_ARGS@ --without-nghttp2 --without-hyper --without-libpsl --disable-tls-srp --disable-rtsp --enable-ipv6 --without-librtmp --without-ldap-lib CPPFLAGS="-I$(CURDIR)/dependencies$(RUDDER_DIR)/include" $(BUILD_FLAGS_EXE)
	# is for loading dependencies of libcurl during the build of curl
	cd libcurl-source && $(MAKE)
	cd libcurl-source && $(MAKE) install DESTDIR=$(CURDIR)/dependencies
	touch $@

build-readline: readline-source
	# do not override flags as they don't work here
	cd readline-source && ./configure --prefix=$(RUDDER_DIR)
	cd readline-source && $(MAKE) $(readline_MAKE_OPT)
	cd readline-source && $(MAKE) install DESTDIR=$(CURDIR)/dependencies
	touch $@

build-augeas: augeas-source @readline_DEP@ @libxml2_DEP@
	@xml2conf@ cd augeas-source && ./configure --disable-dependency-tracking --prefix=$(RUDDER_DIR) @AUGEAS_ARGS@ CPPFLAGS="-I$(CURDIR)/dependencies$(RUDDER_DIR)/include/libxml2 -I$(CURDIR)/dependencies$(RUDDER_DIR)/include" $(BUILD_FLAGS_EXE)
	cd augeas-source && $(MAKE)
	cd augeas-source && $(MAKE) install DESTDIR=$(CURDIR)/dependencies
	# remove augeas tests
	rm -rf $(CURDIR)/dependencies/$(RUDDER_DIR)/share/augeas/lenses/dist/tests/
	touch $@

build-jq: jq-source
	cd jq-source && ./configure --prefix=$(RUDDER_DIR) $(BUILD_FLAGS_EXE) --disable-maintainer-mode --disable-docs --with-oniguruma=builtin --disable-error-injection
	cd jq-source && $(MAKE)
	cd jq-source && $(MAKE) install DESTDIR=$(CURDIR)/dependencies
	touch $@

DEPS_CACHE_PARAMETERS = --with-env name=dependencies configure=$(CONFIGURE_ARGS_HASH) zlib=$(zlib_SHA256) lmdb=$(lmdb_SHA256) openssl=$(openssl_SHA256) libyaml=$(libyaml_SHA256) libxml2=$(libxml2_SHA256) libcurl=$(libcurl_SHA256) augeas=$(augeas_SHA256) readline=$(readline_SHA256) jq=$(jq_SHA256) @CACHE_ARGS@
# Strictly speaking we don't need jq here but it's easier to include it in the cache
CFENGINE_DEPS = $(shell set -x; ../../build-caching get dependencies/ $(DEPS_CACHE_PARAMETERS) || echo @lmdb_DEP@ @openssl_DEP@ @libyaml_DEP@ @libxml2_DEP@ @libcurl_DEP@ @augeas_DEP@ @jq_DEP@ )

# Cache cfengine build itself
CFENGINE_PATCHES_SHA = $(shell find patches/cfengine -type f | sort | xargs openssl dgst -sha256 | openssl dgst -sha256 | awk '{print $$2}')
CFENGINE_CACHE_PARAMETERS = $(DEPS_CACHE_PARAMETERS) cfengine=$(cfengine_SHA256) patches=$(CFENGINE_PATCHES_SHA)
CFENGINE_BUILD = $(shell set -x; ../../build-caching get dependencies/ $(CFENGINE_CACHE_PARAMETERS) || echo build-cfengine-real)

# Separate build-cfengine from build-cfengine-real to separately cache dependencies and cfengine+dependencies
build-cfengine: $(CFENGINE_BUILD)
	# save cfengine with dependencies into cache if we built it
	if [ "$<" != "" ]; then ../../build-caching put dependencies/ $(CFENGINE_CACHE_PARAMETERS); fi
	touch $@

build-cfengine-real: $(CFENGINE_DEPS) cfengine-source
	# save dependencies into cache if we built them
	if [ "$<" != "cfengine-source" ]; then ../../build-caching put dependencies/ $(DEPS_CACHE_PARAMETERS); fi
	# regenerate configure since configure.ac may have been modified by systemd patches (18889 and 18893)
	# not needed for older os so skip it if autoconf is too old but touch files to make sure it is skipped otherwise make will try to to it automatically
	# Crapy: remove this when 18889 and 18893 have been merged upstream
	if type autoconf 2>/dev/null && [ $$(autoconf --version | sed -n '/^autoconf/s/[^0-9]*//gp') -ge 264 ]; then cd cfengine-source && autoreconf -Wno-portability --force --install -I m4; else touch -d+1min configure Makefile.in; fi
	# build system tries to reload systemd by itself
	cd cfengine-source && $(SED) 's/-systemctl daemon-reload/#-systemctl daemon-reload/' misc/Makefile.in > misc/Makefile.in.new && mv misc/Makefile.in.new misc/Makefile.in
	cd cfengine-source && ./configure --prefix=$(RUDDER_DIR) --with-workdir=/var/rudder/cfengine-community --without-postgresql --without-mysql $(CFENGINE_ARGS) $(BUILD_FLAGS_EXE) CPPFLAGS="-I$(CURDIR)/dependencies$(RUDDER_DIR)/include/libxml2"
	cd cfengine-source && $(MAKE)
	cd cfengine-source && $(MAKE) install DESTDIR=$(CURDIR)/dependencies
# solaris doesn't have uuidgen and needs one
	touch $@

# ---- ^ cfengine ---- v fusion ----

CPANM:=$(CURDIR)/cpanminus-source/bin/cpanm
# List from README / Makefile.PL in fusion-inventory-agent
# -> requires + inventory and network recommends
FUSION_MODULES = File::BOM File::Which LWP::UserAgent Net::IP Text::Template UNIVERSAL::require XML::TreePP Parse::EDID DateTime DateTime::TimeZone DateTime::TimeZone::Local::Unix Net::SNMP Net::NBName Thread::Queue Data::Dumper Net::Domain
# update sources at vir-repository with the command: /root/mirror /var/www/repos/build-dependencies/cpan/<version> $FUSION_MODULES
# update core dependencies (for old perl versions) at normation.com with the command: ./mirror $VAR_CPAN autodie Class::C3 CPAN::Meta::Requirements CPAN::Meta::YAML Data::Dumper DateTime DateTime::Locale DateTime::TimeZone Devel::PPPort Digest::base Digest::MD5 Encode ExtUtils::CBuilder ExtUtils::Install ExtUtils::MakeMaker ExtUtils::Manifest ExtUtils::ParseXS File::BOM File::Listing File::Spec File::Temp HTTP::Cookies HTTP::Date HTTP::Lite HTTP::Negotiate HTTP::Request IO::Compress::Bzip2 IO::HTML IPC::Cmd JSON::PP List::Util Locale::Maketext::Simple Local::Win32 LWP::UserAgent Module::Build Module::CoreList Module::Implementation Module::Install Module::Load Net::Domain Params::Check parent Perl::OSType Pod::Escapes Pod::Man Pod::Simple Socket TAP::Harness Test::Harness Text::Template threads threads::shared Time::Local URI::Escape version Module::Metadata Module::Runtime ExtUtils::Constant

build-perl: perl-source
	cd perl-source && $(MAKE) distclean 2>/dev/null || true # Or this can fail on an already used source
	cd perl-source && ./Configure -Dnoextensions=ODBM_File -Duserelocatableinc -Dusethreads -des -Dcc="gcc" -Dinstallprefix=$(RUDDER_DIR) -Dsiteprefix=$(RUDDER_DIR) -Dprefix=$(RUDDER_DIR)
	cd perl-source && $(MAKE)
	cd perl-source && $(MAKE) install DESTDIR=$(CURDIR)/fusion
	# 8Mb of perldoc
	rm -rf fusion/opt/rudder/lib/perl5/$(PERL_RELEASE)/pod
	# 20Mb of perl manual
	find fusion/opt/rudder/share/man -name 'perl' -exec rm -rf {} \; || true
	# Remove 'special' files
	find fusion -name perllocal.pod \
	  -o -name ".packlist" \
	  -o -name "*.bs" \
	  | xargs rm -f
	touch $@

fusion-modules: @perl_DEP@ cpanminus-source
	mkdir -p fusion/opt/rudder/lib/perl5
	# --notest because tests add new Test:: dependencies that cannot be installed properly
	MAKEFLAGS= $(PERL) $(CPANM) $(CPAN_OPT) -L $(CURDIR)/fusion/opt/rudder --from $(CPAN_URL) --notest $(FUSION_MODULES)
	# remove perldoc (10Mb of timezone doc)
	find fusion/opt/rudder/lib/perl5 -type f -name "*.pod" -exec rm -f {} \;
	# Replace destdir by prefix in files generated by cpanm
	find fusion/opt/rudder/lib/perl5 -type f -name "*.packlist" -exec $(PERL) -i -pe "s,$(CURDIR)/fusion,,"  {} \;
	find fusion/opt/rudder/bin -type f -exec $(PERL) -i -pe "s,$(CURDIR)/fusion,,"  {} \;
	touch $@


# Cache fusion and its dependencies
FUSION_PATCHES_SHA = $(shell find patches/fusioninventory -type f | sort | xargs openssl dgst -sha256 | openssl dgst -sha256 | awk '{print $$2}')
FUSION_CACHE_PARAMETERS = --with-env name=fusion fusion=$(fusion_SHA256) perl=$(perl_SHA256) cpanminus=$(cpanminus_SHA256) patches=$(FUSION_PATCHES_SHA)
FUSION_BUILD = $(shell set -x; ../../build-caching get fusion/ $(FUSION_CACHE_PARAMETERS) || echo build-fusion-real)
# do not split cache for perl, this is probably not worth it
build-fusion: $(FUSION_BUILD)
	if [ "$<" != "" ]; then ../../build-caching put fusion/ $(FUSION_CACHE_PARAMETERS); fi
	touch $@

build-fusion-real: fusion-source fusion-modules
	mkdir -p fusion/opt/rudder/share/fusion-utils
	cp -r fusion-source/share/* fusion/opt/rudder/share/fusion-utils/
ifeq ($(INSTALL),ginstall)
	# fusion doesn't know how to make install without gnu tools in the path
	$(SED) 's/\([^g]\)install -m/\1ginstall -m/' fusion-source/Makefile.PL > fusion-source/Makefile.PL.new
	mv fusion-source/Makefile.PL.new fusion-source/Makefile.PL
endif
	cd fusion-source && PERL_MM_USE_DEFAULT=1 $(PERL) -I. Makefile.PL --default PREFIX=$(RUDDER_DIR)
	cd fusion-source && $(MAKE) install DESTDIR=$(CURDIR)/fusion
	# bug in fusion installer that doesn't set the right owner to some files
	chown root fusion/opt/rudder/share/fusioninventory
	chown root fusion/opt/rudder/share/fusioninventory/html


##########################################
# Install components #
##########################################

rudder-agent-version:
	# versions details from the source tarball
	[ -f rudder-sources/versions ] && cp ./rudder-sources/versions $@ || echo "rudder_version=unknown" > $@
	# version details from the ci checkout
	[ -f ../../versions ] && cat ../../versions >> $@ || true

# Do this just before generating package
cleanup-build:
	rm -f dependencies/opt/rudder/lib/*.a
	rm -f dependencies/opt/rudder/lib/libreadline.*
	rm -f dependencies/opt/rudder/lib/*.la
	rm -rf dependencies/opt/rudder/lib/cmake
	rm -rf dependencies/opt/rudder/lib/engines*
	rm -rf dependencies/opt/rudder/lib/pkgconfig
	rm -f dependencies/opt/rudder/lib/xml2Conf.sh
	rm -f dependencies/opt/rudder/lib/libjq* # libjq can be removed, jq loads its lib statically

# We don't use it and it takes some space
	printf "#!/bin/sh\necho 'cf-monitord has been removed from Rudder agent'\nexit 1" > dependencies/opt/rudder/bin/cf-monitord

# Strip binaries
ifeq (,$(DEBUG))
	find dependencies/opt/rudder/bin dependencies/opt/rudder/lib $(RUST_TARGET) -type f -print0 | xargs -0 file | grep -E "executable|shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
endif

# install to DESTDIR
install-agent: build cleanup-build rudder-agent rudder-agent.cron debug-script/rudder-debug-info rudder.8.gz rudder-agent-version
	# Directories
	mkdir -p $(DESTDIR)/var/rudder/cfengine-community/bin
	mkdir -p $(DESTDIR)/var/rudder/tmp
	mkdir -p $(DESTDIR)/var/rudder/tools
	mkdir -p $(DESTDIR)/var/rudder/inventories
	mkdir -p $(DESTDIR)/var/rudder/ncf/local
	mkdir -p $(DESTDIR)/var/rudder/ncf/common
	mkdir -p $(DESTDIR)/var/rudder/reports/ready
	mkdir -p $(DESTDIR)/var/rudder/lib/ssl
	mkdir -p $(DESTDIR)/var/log/rudder/install
	mkdir -p $(DESTDIR)/var/log/rudder/agent-check

	# Binaries
	mkdir -p $(DESTDIR)/opt/rudder/bin
	mkdir -p $(DESTDIR)/var/rudder
ifneq (false,$(USE_RUST))
	$(INSTALL) -m 755 $(RUST_TARGET)/rudder-module-system-updates $(DESTDIR)/opt/rudder/bin/
endif
	cp -rp dependencies/var/rudder/cfengine-community $(DESTDIR)/var/rudder/
	cp -rp dependencies/opt/rudder/bin/cf-* $(DESTDIR)/opt/rudder/bin/
	cp -rp dependencies/opt/rudder/bin/rpmvercmp $(DESTDIR)/opt/rudder/bin/
	@IF_libcurl@ cp -rp dependencies/opt/rudder/bin/curl $(DESTDIR)/opt/rudder/bin/
	@IF_jq@ cp -rp dependencies/opt/rudder/bin/jq $(DESTDIR)/opt/rudder/bin/
	@IF_augeas@ cp -rp dependencies/opt/rudder/bin/aug* $(DESTDIR)/opt/rudder/bin/
	@IF_openssl@ cp -rp dependencies/opt/rudder/bin/openssl $(DESTDIR)/opt/rudder/bin/

	mkdir -p $(DESTDIR)/opt/rudder/share/man/man8
	cd $(DESTDIR)/opt/rudder/bin && for binary in cf-agent cf-promises cf-key cf-execd cf-serverd cf-net cf-runagent; do \
		./$${binary} -M | gzip > $(DESTDIR)/opt/rudder/share/man/man8/$${binary}.8.gz; \
	done

	# Libraries
	mkdir -p $(DESTDIR)/opt/rudder/lib
	cp -rp dependencies/opt/rudder/lib/* $(DESTDIR)/opt/rudder/lib/

	# Perl and fusion
	@IF_perl@ cp -rp fusion/opt/rudder/bin/perl $(DESTDIR)/opt/rudder/bin/
	@IF_fusion@ cp -rp fusion/opt/rudder/bin/fusioninventory-agent $(DESTDIR)/opt/rudder/bin/
	[ -d fusion/opt/rudder/lib/perl5 ] && cp -rp fusion/opt/rudder/lib/perl5 $(DESTDIR)/opt/rudder/lib/
	mkdir -p $(DESTDIR)/opt/rudder/share/
	@IF_fusion@ cp -rp fusion/opt/rudder/share/fusion* $(DESTDIR)/opt/rudder/share/

	# Augeas lens
	@IF_augeas@ cp -rp dependencies/opt/rudder/share/augeas $(DESTDIR)/opt/rudder/share/

	# Systemd files
	@IF_systemd@ mkdir -p $(DESTDIR)/lib/systemd/system
	@IF_systemd@ $(INSTALL) -m 644 systemd/rudder-agent.service $(DESTDIR)/lib/systemd/system/rudder-agent.service
	@IF_systemd@ $(INSTALL) -m 644 systemd/rudder-cf-execd.service $(DESTDIR)/lib/systemd/system/rudder-cf-execd.service
	@IF_systemd@ $(INSTALL) -m 644 systemd/rudder-cf-serverd.service $(DESTDIR)/lib/systemd/system/rudder-cf-serverd.service
	# Init files
	@UNLESS_systemd@ mkdir -p $(DESTDIR)/etc/init.d
	@UNLESS_systemd@ mkdir -p $(DESTDIR)/etc/default
	@UNLESS_systemd@ $(INSTALL) -m 755 rudder-agent.init $(DESTDIR)/etc/init.d/rudder-agent
	@UNLESS_systemd@ $(INSTALL) -m 644 rudder-agent.default $(DESTDIR)/etc/default/rudder-agent

	# cron files
	mkdir -p $(DESTDIR)/etc/cron.d
	$(INSTALL) -m 644 rudder-agent.cron $(DESTDIR)/etc/cron.d/rudder-agent

	# Openssl configuration
	mkdir -p $(DESTDIR)/opt/rudder/etc/ssl
	$(INSTALL) -m 640 openssl.cnf $(DESTDIR)/opt/rudder/etc/ssl/openssl-agent.cnf

	# Rudder scripts
	$(INSTALL) -m 755 run-inventory $(DESTDIR)/opt/rudder/bin/
	$(INSTALL) -m 755 rudder-sign $(DESTDIR)/opt/rudder/bin/
	$(INSTALL) -m 755 rudder-signature-check $(DESTDIR)/opt/rudder/bin/
	$(INSTALL) -m 755 vzps.py $(DESTDIR)/opt/rudder/bin/
	$(INSTALL) -m 755 rudder-perl $(DESTDIR)/opt/rudder/bin/
	$(INSTALL) -m 755 rudder-uuidgen $(DESTDIR)/opt/rudder/bin/
	$(INSTALL) -m 755 debug-script/rudder-debug-info $(DESTDIR)/opt/rudder/bin/
	$(INSTALL) -m 755 rudder-agent/bin/rudder $(DESTDIR)/opt/rudder/bin/
	$(INSTALL) -m 755 rudder-agent/bin/rudder-client $(DESTDIR)/opt/rudder/bin/

	# Package scripts
	mkdir -p $(DESTDIR)/opt/rudder/share/package-scripts
	$(INSTALL) -m 755 rudder-agent-postinst $(DESTDIR)/opt/rudder/share/package-scripts/
	$(INSTALL) -m 755 rudder-agent-prerm $(DESTDIR)/opt/rudder/share/package-scripts/

	# Rudder agent utilities
	mkdir -p $(DESTDIR)/opt/rudder/share/commands
	$(INSTALL) -m 755 rudder-agent/share/commands/* $(DESTDIR)/opt/rudder/share/commands/
	mkdir -p $(DESTDIR)/opt/rudder/share/lib
	$(INSTALL) -m 644 rudder-agent/share/lib/* $(DESTDIR)/opt/rudder/share/lib/
	chmod 755 $(DESTDIR)/opt/rudder/share/lib/timestamp
	mkdir -p $(DESTDIR)/opt/rudder/etc
	$(INSTALL) -m 644 rudder-agent/agent-capabilities $(DESTDIR)/opt/rudder/etc/

	# Bootstrap promises
	mkdir -p $(DESTDIR)/opt/rudder/share/bootstrap-promises/
	$(INSTALL) -m 644 ./rudder-sources/rudder-techniques/bootstrap-promises/* $(DESTDIR)/opt/rudder/share/bootstrap-promises/

	# Install /etc/bash_completion.d/rudder.sh in order to autocomplete rudder commands
	mkdir -p $(DESTDIR)/etc/bash_completion.d
	$(INSTALL) -m 644 rudder-agent/etc/bash_completion.d/rudder.sh $(DESTDIR)/etc/bash_completion.d/

	# Install rudder man page
	mkdir -p $(DESTDIR)/opt/rudder/share/man/man8/
	$(INSTALL) -m 644 rudder.8.gz $(DESTDIR)/opt/rudder/share/man/man8/

	# Create a symlink to make "rudder" available as part of the default PATH
	mkdir -p $(DESTDIR)/usr/bin
	ln -sf /opt/rudder/bin/rudder $(DESTDIR)/usr/bin/rudder

	# Install a profile script to make manuals par of the MANPATH
	mkdir -p $(DESTDIR)/etc/profile.d
	$(INSTALL) -m 644 rudder-agent.sh $(DESTDIR)/etc/profile.d/

	# install agent version file
	mkdir -p $(DESTDIR)/opt/rudder/share/versions/
	$(INSTALL) -m 644 rudder-agent-version $(DESTDIR)/opt/rudder/share/versions/

#################
# Clean targets #
#################

clean:
	rm -rf dependencies fusion
	rm -f build-*
	rm -f rudder.8.gz rudder-agent.cron
	rm -rf rudder-agent
	cd debug-script && $(MAKE) clean 2>/dev/null || true

# distclean should remove everything except rudder-sources.tar.bz2 since it can be brought by by external means
distclean: clean
	rm -rf *-source

mrproper: distclean
	rm -f rudder-sources.tar.bz2

.PHONY: source build install clean dist-clean
