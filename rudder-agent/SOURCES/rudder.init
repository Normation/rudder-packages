#!/bin/sh

#==============================================
# Start/stop script for all Rudder components #
#==============================================
#
### BEGIN INIT INFO
# Provides:		rudder
# Required-Start:	$local_fs $remote_fs $network $syslog
# Required-Stop:	$local_fs $remote_fs $network $syslog
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Rudder server
# Description:		Rudder server including all components required to run
### END INIT INFO
#
# Copyright (C) 2011-2015 Normation
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# GPL License: http://www.gnu.org/licenses/gpl.txt
#
#====================================================================

# Utility functions

get_service_name()
{
# This script detects the closest match for the given service
# If only one version is available, return it
# If multiple versions (postgresql91/postgresql94), return the latest one
# Arguments:
## Service name
  if type systemctl >/dev/null 2>&1; then
    SERVICE_NAME=$(systemctl list-unit-files --type service | awk -F'.' '{print $1}' | grep -E "^${1}[0-9]*$" | tail -n 1)
  elif type chkconfig >/dev/null 2>&1; then
    SERVICE_NAME=$(chkconfig 2>/dev/null | awk '{ print $1 }' | grep "${1}" | tail -n 1)
  else
    SERVICE_NAME=$(ls -1 /etc/init.d | grep "${1}" | tail -n 1)
  fi

  # If we can not get the service name, fallback to the user-supplied name
  if [ -z "${SERVICE_NAME}" ]; then
    SERVICE_NAME="${1}"
  fi

  echo ${SERVICE_NAME}
}

service_action()
{
# Arguments:
## Service name
## Action to trigger (start/stop/...)
## Is the role present on this machine (0/1)

# If the role is present, run the action
if [ "${3}" -eq 1 ]; then
  printf " * ${1}...\t"
  service "${1}" "${2}" >/dev/null 2>&1

  if [ "${?}" -ne 0 ]; then
    printf "${RED}FAILED, please run \"service ${1} ${2}\" for more details${NORMAL}\n"
    RETURN=1
  else
    printf "${GREEN}OK${NORMAL}\n"
  fi

fi
}

service_status()
{
# Arguments:
## Service human-friendly name
## Service name
## Is the role present on this machine (0/1)

printf " * ${1}\t"
if [ "${3}" -ne 1 ]; then
  # If the role is present, run the action
  printf "${YELLOW}Not installed${NORMAL}\n"
elif service "${2}" status >/dev/null 2>&1; then
  printf "${GREEN}OK${NORMAL}\n"
else
  printf "${RED}Not running, please restart with \"service ${2} restart\" ${NORMAL}\n"
  RETURN=1
fi
}

service_details()
{
# Arguments:
## Service human-friendly name
## Service name
## Is the role present on this machine (0/1)

printf "\n * ${BLUE}${1}${NORMAL}:"
if [ "${3}" -eq 1 ]; then
  echo ""
  ${COPYPASTE}
  service "${2}" status || RETURN=${?}
  ${COPYPASTE}
else
  printf " ${YELLOW}Not installed${NORMAL}\n"
fi
}

# Variables

## Environment setup - neutral locale
LANG=C
LANGUAGE=C
LC_ALL=C

export LANG LANGUAGE LC_ALL

# Ensure this script is run as root
if [ "$(id -u)" != "0" ]; then
  echo "Please run this script as root" 1>&2
  exit 1
fi

## Colors configuration (enable colors only if stdout is a terminal)
if [ -t 1 ]; then
  GREEN="\\033[1;32m"
  RED="\\033[1;31m"
  BLUE="\\033[1;34m"
  PINK="\\033[1;35m"
  WHITE="\\033[0;02m"
  WHITELIGHT="\\033[1;08m"
  YELLOW="\\033[1;33m"
  CYAN="\\033[1;36m"
  NORMAL="\\033[0;39m"
  COPYPASTE="printf ${GREEN}---8<---${NORMAL}\n"
else
  GREEN=""
  RED=""
  BLUE=""
  PINK=""
  WHITE=""
  WHITELIGHT=""
  YELLOW=""
  CYAN=""
  NORMAL=""
  COPYPASTE="printf ---8<---\n"
fi

## Active roles

HAVE_SLAPD=0
HAVE_POSTGRESQL=0
HAVE_JETTY=0
HAVE_AGENT=1

### Check slapd's status if we are rudder-inventory-ldap
[ -e /opt/rudder/etc/server-roles.d/rudder-inventory-ldap ] && HAVE_SLAPD=1

### Check PostgreSQL's status if we are rudder-db
[ -e /opt/rudder/etc/server-roles.d/rudder-db ] && HAVE_POSTGRESQL=1

### Check Jetty's status if we are rudder-webapp or rudder-inventory-endpoint
[ -e /opt/rudder/etc/server-roles.d/rudder-inventory-endpoint ] && HAVE_JETTY=1
[ -e /opt/rudder/etc/server-roles.d/rudder-webapp ] && HAVE_JETTY=1

## Service names

RUDDER_SLAPD=rudder-slapd
RUDDER_JETTY=rudder-jetty
RUDDER_AGENT=rudder-agent
POSTGRESQL=$(get_service_name postgresql)

## Default return code
RETURN=0

# Main

start_services()
{
  printf "${GREEN}Starting Rudder services:${NORMAL}\n"

  service_action "${RUDDER_SLAPD}" start "${HAVE_SLAPD}"
  service_action "${POSTGRESQL}"   start "${HAVE_POSTGRESQL}"
  service_action "${RUDDER_JETTY}" start "${HAVE_JETTY}"
  service_action "${RUDDER_AGENT}" start "${HAVE_AGENT}"
}

stop_services()
{
  printf "${GREEN}Stopping Rudder services:${NORMAL}\n"

  service_action "${RUDDER_SLAPD}" stop "${HAVE_SLAPD}"
  service_action "${POSTGRESQL}"   stop "${HAVE_POSTGRESQL}"
  service_action "${RUDDER_JETTY}" stop "${HAVE_JETTY}"
  service_action "${RUDDER_AGENT}" stop "${HAVE_AGENT}"
}

details_services()
{
  printf "${GREEN}Detailed component status:${NORMAL}\n"

  service_details "Agent"       "${RUDDER_AGENT}" "${HAVE_AGENT}"
  service_details "LDAP DB"     "${RUDDER_SLAPD}" "${HAVE_SLAPD}"
  service_details "SQL DB"      "${POSTGRESQL}"   "${HAVE_POSTGRESQL}"
  service_details "Application" "${RUDDER_JETTY}" "${HAVE_JETTY}"
}

status_services()
{
  printf "${GREEN}Component status:${NORMAL}\n"

  service_status "Agent"       "${RUDDER_AGENT}" "${HAVE_AGENT}"
  service_status "LDAP DB"     "${RUDDER_SLAPD}" "${HAVE_SLAPD}"
  service_status "SQL DB"      "${POSTGRESQL}"   "${HAVE_POSTGRESQL}"
  service_status "Application" "${RUDDER_JETTY}" "${HAVE_JETTY}"
}

case "$1" in
  start)
    start_services
  ;;
  stop)
    stop_services
  ;;
  restart)
    stop_services
    echo ""
    start_services
  ;;
  status)
    status_services
  ;;
  details)
    details_services
  ;;
  *)
    echo "Usage: $0 {start|stop|restart|status|details}"
    exit 1
  ;;
esac

exit ${RETURN}
