From 0dcf72efba55fb6ed4aa8e7aa7b0b82b8a878293 Mon Sep 17 00:00:00 2001
From: Kristian Amlie <kristian.amlie@cfengine.com>
Date: Tue, 19 Apr 2016 09:25:59 +0200
Subject: [PATCH] Add callstack_callers() and callstack_promisers() functions.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The former returns a huge data structure full of information about the
callstack. The latter returns a simplified slist, only containing the
names of the bundles leading up to the calling bundle.

The commit consists of contributions from several authors:
- Alexis Mousset <alexis.mousset@normation.com>
- Beno√Æt Peccatte <benoit.peccatte@normation.com>
- Ted Zlatanov <tzz@lifelogs.com>

Changelog: Title
---
 libpromises/cf3.defs.h                             |  3 +-
 libpromises/eval_context.c                         | 81 ++++++++++++++++++++++
 libpromises/eval_context.h                         |  5 ++
 libpromises/evalfunction.c                         | 35 +++++++++-
 libpromises/policy.c                               |  4 +-
 libpromises/policy.h                               | 14 ++++
 libpromises/syntax.c                               |  3 +-
 .../21_methods/callers/callers_directly.cf         | 59 ++++++++++++++++
 .../21_methods/callers/promisers_directly.cf       | 53 ++++++++++++++
 .../21_methods/callers/promisers_indirectly.cf     | 71 +++++++++++++++++++
 10 files changed, 322 insertions(+), 6 deletions(-)
 create mode 100644 tests/acceptance/21_methods/callers/callers_directly.cf
 create mode 100644 tests/acceptance/21_methods/callers/promisers_directly.cf
 create mode 100644 tests/acceptance/21_methods/callers/promisers_indirectly.cf

diff --git a/libpromises/cf3.defs.h b/libpromises/cf3.defs.h
index 7f17c4a..8c9e382 100644
--- a/libpromises/cf3.defs.h
+++ b/libpromises/cf3.defs.h
@@ -624,7 +624,8 @@ typedef enum
     FNCALL_CATEGORY_IO,
     FNCALL_CATEGORY_COMM,
     FNCALL_CATEGORY_DATA,
-    FNCALL_CATEGORY_UTILS
+    FNCALL_CATEGORY_UTILS,
+    FNCALL_CATEGORY_INTERNAL
 } FnCallCategory;
 
 struct ConstraintSyntax_
diff --git a/libpromises/eval_context.c b/libpromises/eval_context.c
index 55d6786..3081ff3 100644
--- a/libpromises/eval_context.c
+++ b/libpromises/eval_context.c
@@ -74,6 +74,8 @@ TYPED_MAP_DEFINE(FuncCache, Rlist *, Rva
                  RvalDestroy2)
 
 
+#include <policy.h>
+
 static bool BundleAborted(const EvalContext *ctx);
 static void SetBundleAborted(EvalContext *ctx);
 
@@ -1000,6 +1002,85 @@ void EvalContextClear(EvalContext *ctx)
     FuncCacheMapClear(ctx->function_cache);
 }
 
+Rlist *EvalContextGetPromiseCallerMethods(EvalContext *ctx) {
+    Rlist *callers_promisers = NULL;
+
+    for (size_t i = 0; i < SeqLength(ctx->stack); i++)
+    {
+        StackFrame *frame = SeqAt(ctx->stack, i);
+        switch (frame->type)
+        {
+        case STACK_FRAME_TYPE_BODY:
+            break;
+
+        case STACK_FRAME_TYPE_BUNDLE:
+            break;
+
+        case STACK_FRAME_TYPE_PROMISE_ITERATION:
+            break;
+
+        case STACK_FRAME_TYPE_PROMISE:
+            if (strcmp(frame->data.promise.owner->parent_promise_type->name, "methods") == 0) {
+                RlistAppendScalar(&callers_promisers, frame->data.promise.owner->promiser);
+            }
+            break;
+
+        case STACK_FRAME_TYPE_PROMISE_TYPE:
+            break;
+        }
+    }
+    return callers_promisers;
+}
+
+JsonElement *EvalContextGetPromiseCallers(EvalContext *ctx) {
+    JsonElement *callers = JsonArrayCreate(4);
+    size_t depth = SeqLength(ctx->stack);
+
+    for (size_t i = 0; i < depth; i++)
+    {
+        StackFrame *frame = SeqAt(ctx->stack, i);
+        JsonElement *f = JsonObjectCreate(10);
+        JsonObjectAppendInteger(f, "frame", depth-i);
+        JsonObjectAppendInteger(f, "depth", i);
+
+        switch (frame->type)
+        {
+        case STACK_FRAME_TYPE_BODY:
+            JsonObjectAppendString(f, "type", "body");
+            JsonObjectAppendObject(f, "body", BodyToJson(frame->data.body.owner));
+            break;
+
+        case STACK_FRAME_TYPE_BUNDLE:
+            JsonObjectAppendString(f, "type", "bundle");
+            JsonObjectAppendObject(f, "bundle", BundleToJson(frame->data.bundle.owner));
+            break;
+
+        case STACK_FRAME_TYPE_PROMISE_ITERATION:
+            JsonObjectAppendString(f, "type", "iteration");
+            JsonObjectAppendInteger(f, "iteration_index", frame->data.promise_iteration.index);
+
+            break;
+
+        case STACK_FRAME_TYPE_PROMISE:
+            JsonObjectAppendString(f, "type", "promise");
+            JsonObjectAppendString(f, "promise_type", frame->data.promise.owner->parent_promise_type->name);
+            JsonObjectAppendString(f, "promiser", frame->data.promise.owner->promiser);
+            JsonObjectAppendString(f, "promise_classes", frame->data.promise.owner->classes);
+            JsonObjectAppendString(f, "promise_comment", NULL == frame->data.promise.owner->comment ? "" : frame->data.promise.owner->comment);
+            break;
+
+        case STACK_FRAME_TYPE_PROMISE_TYPE:
+            JsonObjectAppendString(f, "type", "promise_type");
+            JsonObjectAppendString(f, "promise_type", frame->data.promise_type.owner->name);
+            break;
+        }
+
+        JsonArrayAppendObject(callers, f);
+    }
+
+    return callers;
+}
+
 void EvalContextSetBundleArgs(EvalContext *ctx, const Rlist *args)
 {
     if (ctx->args)
diff --git a/libpromises/eval_context.h b/libpromises/eval_context.h
index d4e5941..15c0ed6 100644
--- a/libpromises/eval_context.h
+++ b/libpromises/eval_context.h
@@ -131,6 +131,8 @@ ClassTableIterator *EvalContextClassTableIteratorNewLocal(const EvalContext *ctx
 
 void EvalContextClear(EvalContext *ctx);
 
+Rlist *EvalContextGetPromiseCallerMethods(EvalContext *ctx);
+
 void EvalContextStackPushBundleFrame(EvalContext *ctx, const Bundle *owner, const Rlist *args, bool inherits_previous);
 void EvalContextStackPushBodyFrame(EvalContext *ctx, const Promise *caller, const Body *body, const Rlist *args);
 void EvalContextStackPushPromiseTypeFrame(EvalContext *ctx, const PromiseType *owner);
@@ -149,6 +151,9 @@ const Promise *EvalContextStackCurrentPromise(const EvalContext *ctx);
 const Bundle *EvalContextStackCurrentBundle(const EvalContext *ctx);
 const RingBuffer *EvalContextStackCurrentMessages(const EvalContext *ctx);
 
+Rlist *EvalContextGetPromiseCallerMethods(EvalContext *ctx);
+JsonElement *EvalContextGetPromiseCallers(EvalContext *ctx);
+
 bool EvalContextVariablePut(EvalContext *ctx, const VarRef *ref, const void *value, DataType type, const char *tags);
 bool EvalContextVariablePutSpecial(EvalContext *ctx, SpecialScope scope, const char *lval, const void *value, DataType type, const char *tags);
 const void *EvalContextVariableGet(const EvalContext *ctx, const VarRef *ref, DataType *type_out);
diff --git a/libpromises/evalfunction.c b/libpromises/evalfunction.c
index 348f348..9ede974 100644
--- a/libpromises/evalfunction.c
+++ b/libpromises/evalfunction.c
@@ -24,7 +24,6 @@
 
 #include <evalfunction.h>
 
-#include <eval_context.h>
 #include <promises.h>
 #include <dir.h>
 #include <dbm_api.h>
@@ -7075,6 +7074,22 @@ void ModuleProtocol(EvalContext *ctx, ch
 }
 
 /*********************************************************************/
+
+static FnCallResult FnCallCFEngineCallers(EvalContext *ctx, ARG_UNUSED const Policy *policy, const FnCall *fp, ARG_UNUSED const Rlist *finalargs)
+{
+    bool promisersmode = (0 == strcmp(fp->name, "callstack_promisers"));
+
+    if (promisersmode)
+    {
+        Rlist *returnlist = EvalContextGetPromiseCallerMethods(ctx);
+        return (FnCallResult) { FNCALL_SUCCESS, { returnlist, RVAL_TYPE_LIST } };
+    }
+
+    JsonElement *callers = EvalContextGetPromiseCallers(ctx);
+    return (FnCallResult) { FNCALL_SUCCESS, { callers, RVAL_TYPE_CONTAINER } };
+}
+
+/*********************************************************************/
 /* Level                                                             */
 /*********************************************************************/
 
@@ -7953,6 +7968,16 @@ static const FnCallArg STRING_MUSTACHE_A
     {NULL, CF_DATA_TYPE_NONE, NULL}
 };
 
+static const FnCallArg CFENGINE_PROMISERS_ARGS[] =
+{
+    {NULL, CF_DATA_TYPE_NONE, NULL}
+};
+
+static const FnCallArg CFENGINE_CALLERS_ARGS[] =
+{
+    {NULL, CF_DATA_TYPE_NONE, NULL}
+};
+
 /*********************************************************/
 /* FnCalls are rvalues in certain promise constraints    */
 /*********************************************************/
@@ -8266,7 +8291,13 @@ const FnCallType CF_FNCALL_TYPES[] =
     FnCallTypeNew("variance", CF_DATA_TYPE_REAL, STAT_FOLD_ARGS, &FnCallFold, "Return the variance of a list",
                   FNCALL_OPTION_NONE, FNCALL_CATEGORY_DATA, SYNTAX_STATUS_NORMAL),
 
-    // Data container functions
+    // CFEngine internal functions
+    FnCallTypeNew("callstack_promisers", CF_DATA_TYPE_STRING_LIST, CFENGINE_PROMISERS_ARGS, &FnCallCFEngineCallers, "Get the list of promisers to the current promise execution path",
+                  FNCALL_OPTION_NONE, FNCALL_CATEGORY_INTERNAL, SYNTAX_STATUS_NORMAL),
+    FnCallTypeNew("callstack_callers", CF_DATA_TYPE_CONTAINER, CFENGINE_CALLERS_ARGS, &FnCallCFEngineCallers, "Get the current promise execution stack in detail",
+                  FNCALL_OPTION_NONE, FNCALL_CATEGORY_INTERNAL, SYNTAX_STATUS_NORMAL),
+
+                  // Data container functions
     FnCallTypeNew("data_regextract", CF_DATA_TYPE_CONTAINER, DATA_REGEXTRACT_ARGS, &FnCallRegExtract, "Matches the regular expression in arg 1 against the string in arg2 and returns a data container holding the backreferences by name",
                   FNCALL_OPTION_NONE, FNCALL_CATEGORY_DATA, SYNTAX_STATUS_NORMAL),
     FnCallTypeNew("data_expand", CF_DATA_TYPE_CONTAINER, DATA_EXPAND_ARGS, &FnCallDataExpand, "Expands any CFEngine variables in a data container, keys or values",
diff --git a/libpromises/policy.c b/libpromises/policy.c
index 2a656ce..7fe6952 100644
--- a/libpromises/policy.c
+++ b/libpromises/policy.c
@@ -1761,7 +1761,7 @@ static JsonElement *BundleContextsToJson(const Seq *promises)
     return json_contexts;
 }
 
-static JsonElement *BundleToJson(const Bundle *bundle)
+JsonElement *BundleToJson(const Bundle *bundle)
 {
     JsonElement *json_bundle = JsonObjectCreate(10);
 
@@ -1810,7 +1810,7 @@ static JsonElement *BundleToJson(const Bundle *bundle)
 }
 
 
-static JsonElement *BodyToJson(const Body *body)
+JsonElement *BodyToJson(const Body *body)
 {
     JsonElement *json_body = JsonObjectCreate(10);
 
diff --git a/libpromises/policy.h b/libpromises/policy.h
index e0331a9..2b0b0c0 100644
--- a/libpromises/policy.h
+++ b/libpromises/policy.h
@@ -221,6 +221,20 @@ Body *PolicyAppendBody(Policy *policy, const char *ns, const char *name, const c
 JsonElement *PolicyToJson(const Policy *policy);
 
 /**
+ * @brief Serialize a bundle as JSON
+ * @param bundle The bundle to serialize
+ * @return A JsonElement representing the input bundle
+ */
+JsonElement *BundleToJson(const Bundle *bundle);
+
+/**
+ * @brief Serialize a body as JSON
+ * @param body The body to serialize
+ * @return A JsonElement representing the input body
+ */
+JsonElement *BodyToJson(const Body *body);
+
+/**
  * @brief Deserialize a policy from JSON
  * @param json_policy JSON to deserialize
  * @return A policy DOM
diff --git a/libpromises/syntax.c b/libpromises/syntax.c
index e2f7e06..7f6fe5d 100644
--- a/libpromises/syntax.c
+++ b/libpromises/syntax.c
@@ -1195,7 +1195,8 @@ static const char *FnCallCategoryToString(FnCallCategory category)
         [FNCALL_CATEGORY_FILES] = "files",
         [FNCALL_CATEGORY_IO] = "io",
         [FNCALL_CATEGORY_SYSTEM] = "system",
-        [FNCALL_CATEGORY_UTILS] = "utils"
+        [FNCALL_CATEGORY_UTILS] = "utils",
+        [FNCALL_CATEGORY_INTERNAL] = "internal"
     };
 
     return category_str[category];
diff --git a/tests/acceptance/21_methods/callers/callers_directly.cf b/tests/acceptance/21_methods/callers/callers_directly.cf
new file mode 100644
index 0000000..0ddd755
--- /dev/null
+++ b/tests/acceptance/21_methods/callers/callers_directly.cf
@@ -0,0 +1,59 @@
+#######################################################
+#
+# Test the variable this.callers_promisers with one bundle
+#
+#######################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+#######################################################
+
+bundle agent init {
+}
+
+bundle agent test {
+  methods:
+    "test" usebundle => "caller";
+}
+
+bundle agent check {
+  vars:
+      "callers_expect" string => "agent";
+      # Due to the 4K variable limit we cannot test the whole structure, so
+      # just test one element within it. At least it's not completely broken
+      # if we find it.
+      "callers_actual" string => "$(dummy.callers[0][bundle][bundleType])";
+
+  classes:
+      "success"  expression => strcmp("${callers_expect}", "${callers_actual}"),
+        scope => "namespace";
+
+  reports:
+    success::
+      "$(this.promise_filename) Pass";
+    !success::
+      "$(this.promise_filename) FAIL";
+
+  methods:
+      "any" usebundle => file_make($(G.testfile), $(callers_actual));
+
+  reports:
+    DEBUG::
+      "EXPECT: callers_string = ${callers_expect}";
+      "ACTUAL: callers_string = $(callers_actual)";
+}
+
+bundle agent caller {
+  methods:
+    "first call" usebundle => dummy;
+}
+
+bundle agent dummy {
+  vars:
+    "callers" data => callstack_callers();
+}
diff --git a/tests/acceptance/21_methods/callers/promisers_directly.cf b/tests/acceptance/21_methods/callers/promisers_directly.cf
new file mode 100644
index 0000000..14edfd4
--- /dev/null
+++ b/tests/acceptance/21_methods/callers/promisers_directly.cf
@@ -0,0 +1,53 @@
+#######################################################
+#
+# Test the variable this.callers_promisers with one bundle
+#
+#######################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+#######################################################
+
+bundle agent init {
+}
+
+bundle agent test {
+  methods:
+    "test" usebundle => "caller";
+}
+
+bundle agent check {
+  reports:
+    success::
+      "$(this.promise_filename) Pass";
+    !success::
+      "$(this.promise_filename) FAIL";
+}
+
+bundle agent caller {
+  methods:
+    "first call" usebundle => dummy;
+}
+
+bundle agent dummy {
+  vars:
+    "callers_promisers" slist => callstack_promisers();
+
+    "callers_promisers_expect" string => "any, any, test, first call";
+    "callers_promisers_actual" string => join(", ", "callers_promisers");
+
+  classes:
+    "success"  expression => strcmp("${callers_promisers_expect}", "${callers_promisers_actual}"),
+      scope => "namespace";
+
+  reports:
+    DEBUG::
+      "EXPECT: callers_promisers_string = ${callers_promisers_expect}";
+      "ACTUAL: callers_promisers_string = ${callers_promisers_actual}";
+}
+
diff --git a/tests/acceptance/21_methods/callers/promisers_indirectly.cf b/tests/acceptance/21_methods/callers/promisers_indirectly.cf
new file mode 100644
index 0000000..4e14576
--- /dev/null
+++ b/tests/acceptance/21_methods/callers/promisers_indirectly.cf
@@ -0,0 +1,71 @@
+#######################################################
+#
+# Test the variable this.callers_promisers with one bundle called twice
+#
+#######################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+#######################################################
+
+bundle agent init {
+}
+
+bundle agent test {
+  methods:
+    "test" usebundle => "caller";
+}
+
+bundle agent check {
+  reports:
+    success_first.success_second::
+      "$(this.promise_filename) Pass";
+    !(success_first.success_second)::
+      "$(this.promise_filename) FAIL";
+}
+
+bundle agent caller {
+
+  methods:
+    "first call" usebundle => dummy;
+    "second call" usebundle => dummy_inter;
+
+}
+
+bundle agent dummy_inter {
+
+  methods:
+    "inter" usebundle => dummy;
+
+}
+
+bundle agent dummy {
+
+  vars:
+    # This bundle gets called twice, once directly, and once via dummy_inter
+    "callers_promisers" slist => callstack_promisers();
+
+    "callers_promisers_expect_first" string => "any, any, test, first call";
+    "callers_promisers_expect_second" string => "any, any, test, second call, inter";
+    "callers_promisers_actual" string => join(", ", "callers_promisers");
+
+  classes:
+    "success_first"  expression => strcmp("${callers_promisers_expect_first}", "${callers_promisers_actual}"),
+      scope => "namespace";
+    "success_second" expression => strcmp("${callers_promisers_expect_second}", "${callers_promisers_actual}"),
+      scope => "namespace";
+
+  reports:
+    DEBUG::
+      "EXPECT (first in ${this.bundle}): callers_promisers_string = ${callers_promisers_expect_first}";
+      "ACTUAL (first in ${this.bundle}): callers_promisers_string = ${callers_promisers_actual}";
+
+      "EXPECT (second in ${this.bundle}): callers_promisers_string = ${callers_promisers_expect_second}";
+      "ACTUAL (second in ${this.bundle}): callers_promisers_string = ${callers_promisers_actual}";
+}
+
