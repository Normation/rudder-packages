From 2c0c092fafd7d8031e3f5a18021beadd3084c11b Mon Sep 17 00:00:00 2001
From: Alexis Mousset <alexis.mousset@normation.com>
Date: Tue, 12 Jan 2016 11:56:28 +0100
Subject: [PATCH] Add default body for all promise types

Changelog: When a bodydefault:<promise_type>_<body_type> body is
defined, it will be used by all promises of type <promise_type>
unless another body is explicitly used.
---
 libpromises/eval_context.h                         |  4 ++
 libpromises/promises.c                             | 41 ++++++++++++
 .../00_basics/03_bodies/default_files_action.cf    | 76 ++++++++++++++++++++++
 3 files changed, 121 insertions(+)
 create mode 100644 tests/acceptance/00_basics/03_bodies/default_files_action.cf

diff --git a/libpromises/eval_context.h b/libpromises/eval_context.h
index 558a7ee..db54590 100644
--- a/libpromises/eval_context.h
+++ b/libpromises/eval_context.h
@@ -179,6 +179,9 @@ const Bundle *EvalContextResolveBundleEx
 const Body *EvalContextResolveBodyExpression(const EvalContext *ctx, const Policy *policy,
                                              const char *callee_reference, const char *callee_type);
 
+const Body *EvalContextFindFirstMatchingBody(const Policy *policy, const char *type,
+                                             const char *namespace, const char *name);
+
 /* - Parsing/evaluating expressions - */
 void ValidateClassSyntax(const char *str);
 bool IsDefinedClass(const EvalContext *ctx, const char *context);
diff --git a/libpromises/promises.c b/libpromises/promises.c
index 2e59769..a346bb3 100644
--- a/libpromises/promises.c
+++ b/libpromises/promises.c
@@ -37,6 +37,7 @@
 #include <string_lib.h>
 
 static void DereferenceComment(Promise *pp);
+static void AddDefaultBodiesToPromise(EvalContext *ctx, Promise *promise, const PromiseTypeSyntax *syntax);
 
 void CopyBodyConstraintsToPromise(EvalContext *ctx, Promise *pp,
                                   const Body *bp)
@@ -262,10 +263,50 @@ Promise *DeRefCopyPromise(EvalContext *c
             }
         }
     }
+    
+    // Add default body for promise body types that are not present
+    char *bundle_type = pcopy->parent_promise_type->parent_bundle->type;
+    char *promise_type = pcopy->parent_promise_type->name;
+    const PromiseTypeSyntax *syntax = PromiseTypeSyntaxGet(bundle_type, promise_type);
+    AddDefaultBodiesToPromise(ctx, pcopy, syntax);
+
+    // Add default body for global body types that are not present
+    const PromiseTypeSyntax *global_syntax = PromiseTypeSyntaxGet("*", "*");
+    AddDefaultBodiesToPromise(ctx, pcopy, global_syntax);
 
     return pcopy;
 }
 
+// Try to add default bodies to promise for every body type found in syntax
+static void AddDefaultBodiesToPromise(EvalContext *ctx, Promise *promise, const PromiseTypeSyntax *syntax)
+{
+    // do nothing if syntax is not defined
+    if (syntax == NULL) {
+        return;
+    }
+
+    // iterate over possible constraints
+    for (int i = 0; syntax->constraints[i].lval; i++)
+    {
+        // of type body
+        if(syntax->constraints[i].dtype == CF_DATA_TYPE_BODY) {
+            const char *constraint_type = syntax->constraints[i].lval;
+            // if there is no matching body in this promise
+            if(!PromiseBundleOrBodyConstraintExists(ctx, constraint_type, promise)) {
+                const Policy *policy = PolicyFromPromise(promise);
+                // default format is <promise_type>_<body_type>
+                char* default_body_name = StringConcatenate(3, promise->parent_promise_type->name, "_", constraint_type);
+                const Body *bp = EvalContextFindFirstMatchingBody(policy, constraint_type, "bodydefault", default_body_name);
+                if(bp) {
+                    Log(LOG_LEVEL_VERBOSE, "Using the default body: %60s", default_body_name);
+                    CopyBodyConstraintsToPromise(ctx, promise, bp);
+                }
+                free(default_body_name);
+            }
+        }
+    }
+}
+
 /*****************************************************************************/
 
 static bool EvaluateConstraintIteration(EvalContext *ctx, const Constraint *cp, Rval *rval_out)
diff --git a/tests/acceptance/00_basics/03_bodies/default_files_action.cf b/tests/acceptance/00_basics/03_bodies/default_files_action.cf
new file mode 100644
index 0000000..27865b5
--- /dev/null
+++ b/tests/acceptance/00_basics/03_bodies/default_files_action.cf
@@ -0,0 +1,76 @@
+#######################################################
+#
+# Test default body action and overriding with specific action
+#
+#######################################################
+
+body common control
+{
+      inputs => { "../../default.cf.sub" };
+      bundlesequence  => { default("$(this.promise_filename)") };
+      version => "1.0";
+}
+
+#######################################################
+
+body file control
+{
+   namespace => "bodydefault"; 
+}
+
+body action files_action
+{
+    action_policy => "warn";
+}
+
+body file control
+{
+    namespace => "default"; 
+}
+
+body action specific
+{
+    action_policy => "fix";
+}
+
+#######################################################
+
+bundle agent test_specified_action
+{
+  files:
+	  "$(G.testdir)/specified"
+	     create => "true",
+       action => specific;
+}
+
+bundle agent test_default_action
+{
+  files:
+	  "$(G.testdir)/default"
+	     create => "true";
+}
+
+#######################################################
+
+bundle agent test
+{
+  methods:
+      "specified"
+        usebundle => test_specified_action;
+      "default"
+        usebundle => test_default_action;
+}
+
+bundle agent check
+{
+  classes:
+    "default_created" expression => fileexists("$(G.testdir)/default");
+    "specified_created" expression => fileexists("$(G.testdir)/specified");
+    "ok" expression => "specified_created.!default_created";
+
+  reports:   
+    ok::
+      "$(this.promise_filename) Pass";
+    !ok::
+      "$(this.promise_filename) FAIL";
+}
