diff -upr cfengine-3.7.1/cf-agent/verify_files_utils.c cfengine-3.7.1-b/cf-agent/verify_files_utils.c
--- cfengine-3.7.1/cf-agent/verify_files_utils.c	2015-09-06 12:39:13.000000000 +0200
+++ cfengine-3.7.1-b/cf-agent/verify_files_utils.c	2015-12-17 13:05:14.706570253 +0100
@@ -823,7 +823,16 @@ static PromiseResult SourceSearchAndCopy
         /* This sends 1st STAT command. */
         if (!ConsiderAbstractFile(dirp->d_name, from, attr.copy, conn))
         {
-            continue;
+            if (conn != NULL && conn->conn_info->is_broken)
+            {
+                cfPS(ctx, LOG_LEVEL_INFO, PROMISE_RESULT_INTERRUPTED, pp,
+                     attr, "connection timeout");
+                return PROMISE_RESULT_INTERRUPTED;
+            }
+            else
+            {
+                continue;
+            }
         }
 
         if (attr.copy.purge)    /* Purge this file */
@@ -854,7 +863,16 @@ static PromiseResult SourceSearchAndCopy
             if (cf_stat(newfrom, &sb, attr.copy, conn) == -1)
             {
                 Log(LOG_LEVEL_VERBOSE, "Can't stat '%s'. (cf_stat: %s)", newfrom, GetErrorStr());
-                continue;                                       /* TODO FAIL? */
+                if (conn != NULL && conn->conn_info->is_broken)
+                {
+                    cfPS(ctx, LOG_LEVEL_INFO, PROMISE_RESULT_INTERRUPTED, pp,
+                         attr, "connection timeout");
+                    return PROMISE_RESULT_INTERRUPTED;
+                }
+                else
+                {
+                    continue;
+                }
             }
         }
         else
@@ -862,7 +880,17 @@ static PromiseResult SourceSearchAndCopy
             if (cf_lstat(newfrom, &sb, attr.copy, conn) == -1)
             {
                 Log(LOG_LEVEL_VERBOSE, "Can't stat '%s'. (cf_stat: %s)", newfrom, GetErrorStr());
-                continue;                                       /* TODO FAIL? */
+                if (conn != NULL && conn->conn_info->is_broken)
+                {
+                    cfPS(ctx, LOG_LEVEL_INFO,
+                         PROMISE_RESULT_INTERRUPTED, pp, attr,
+                         "connection timeout");
+                    return PROMISE_RESULT_INTERRUPTED;
+                }
+                else
+                {
+                    continue;
+                }
             }
         }
 
@@ -1032,7 +1060,16 @@ static PromiseResult VerifyCopy(EvalCont
             if (!ConsiderAbstractFile(dirp->d_name, sourcedir,
                                       attr.copy, conn))
             {
-                continue;
+                if (conn != NULL && conn->conn_info->is_broken)
+                {
+                    cfPS(ctx, LOG_LEVEL_INFO, PROMISE_RESULT_INTERRUPTED,
+                         pp, attr, "connection timeout");
+                    return PROMISE_RESULT_INTERRUPTED;
+                }
+                else
+                {
+                    continue;
+                }
             }
 
             strcpy(sourcefile, sourcedir);
diff -upr cfengine-3.7.1/libcfnet/client_code.c cfengine-3.7.1-b/libcfnet/client_code.c
--- cfengine-3.7.1/libcfnet/client_code.c	2015-09-06 12:39:13.000000000 +0200
+++ cfengine-3.7.1-b/libcfnet/client_code.c	2015-12-17 13:05:14.707570267 +0100
@@ -754,7 +754,7 @@ int CopyRegularFileNet(const char *sourc
     {
         int toget = MIN(size - n_read_total, buf_size);
 
-        assert(toget != 0);
+        assert(toget > 0);
 
         /* Stage C1 - receive */
         int n_read;
diff -upr cfengine-3.7.1/libcfnet/connection_info.h cfengine-3.7.1-b/libcfnet/connection_info.h
--- cfengine-3.7.1/libcfnet/connection_info.h	2015-09-06 12:39:13.000000000 +0200
+++ cfengine-3.7.1-b/libcfnet/connection_info.h	2015-12-17 13:05:14.707570267 +0100
@@ -56,6 +56,7 @@ struct ConnectionInfo {
     socklen_t ss_len;
     struct sockaddr_storage ss;
     bool is_call_collect;       /* Maybe replace with a bitfield later ... */
+    bool is_broken; /* used to propagate connection errors up in function calls */
 };
 
 typedef struct ConnectionInfo ConnectionInfo;
diff -upr cfengine-3.7.1/libcfnet/net.c cfengine-3.7.1-b/libcfnet/net.c
--- cfengine-3.7.1/libcfnet/net.c	2015-09-06 12:39:13.000000000 +0200
+++ cfengine-3.7.1-b/libcfnet/net.c	2015-12-17 13:05:14.707570267 +0100
@@ -123,7 +123,7 @@ int SendTransaction(const ConnectionInfo
  *  @return 0 in case of socket closed, -1 in case of other error, or
  *          >0 the number of bytes read.
  */
-int ReceiveTransaction(const ConnectionInfo *conn_info, char *buffer, int *more)
+int ReceiveTransaction(ConnectionInfo *conn_info, char *buffer, int *more)
 {
     char proto[CF_INBAND_OFFSET + 1] = { 0 };
     int ret;
@@ -145,6 +145,13 @@ int ReceiveTransaction(const ConnectionI
 
     if (ret == -1 || ret == 0)
     {
+        /* We are experiencing problems with receiving data from server.
+         * This might lead to packages being not delivered in correct
+         * order and unexpected issues like directories being replaced
+         * with files.
+         * In order to make sure that file transfer is reliable we have to
+         * close connection to avoid broken packages being received. */
+        conn_info->is_broken = true;
         return ret;
     }
     else if (ret != CF_INBAND_OFFSET)
@@ -152,6 +159,7 @@ int ReceiveTransaction(const ConnectionI
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: bogus short header (%d bytes: '%s')",
             ret, proto);
+        conn_info->is_broken = true;
         return -1;
     }
 
@@ -165,18 +173,21 @@ int ReceiveTransaction(const ConnectionI
     {
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: bogus header: %s", proto);
+        conn_info->is_broken = true;
         return -1;
     }
     if (status != CF_MORE && status != CF_DONE)
     {
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: bogus header (more='%c')", status);
+        conn_info->is_broken = true;
         return -1;
     }
     if (len > CF_BUFSIZE - CF_INBAND_OFFSET)
     {
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: packet too long (len=%d)", len);
+        conn_info->is_broken = true;
         return -1;
     }
     else if (len <= 0)
@@ -185,6 +196,7 @@ int ReceiveTransaction(const ConnectionI
          * ReceiveTransaction() == 0 currently means connection closed. */
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: packet too short (len=%d)", len);
+        conn_info->is_broken = true;
         return -1;
     }
 
@@ -219,8 +231,9 @@ int ReceiveTransaction(const ConnectionI
         ret = -1;
     }
 
-    if (ret == -1 || ret == 0)
+    if (ret <= 0)
     {
+        conn_info->is_broken = true;
         return ret;
     }
     else if (ret != len)
@@ -230,6 +243,7 @@ int ReceiveTransaction(const ConnectionI
         Log(LOG_LEVEL_ERR,
             "Partial transaction read %d != %d bytes!",
             ret, len);
+        conn_info->is_broken = true;
         return -1;
     }
 
Only in cfengine-3.7.1-b/libcfnet: net.c.orig
diff -upr cfengine-3.7.1/libcfnet/net.h cfengine-3.7.1-b/libcfnet/net.h
--- cfengine-3.7.1/libcfnet/net.h	2015-09-06 12:39:13.000000000 +0200
+++ cfengine-3.7.1-b/libcfnet/net.h	2015-12-17 13:05:14.707570267 +0100
@@ -35,7 +35,7 @@ extern uint32_t bwlimit_kbytes;
 
 
 int SendTransaction(const ConnectionInfo *conn_info, const char *buffer, int len, char status);
-int ReceiveTransaction(const ConnectionInfo *conn_info, char *buffer, int *more);
+int ReceiveTransaction(ConnectionInfo *conn_info, char *buffer, int *more);
 
 int SetReceiveTimeout(int fd, unsigned long ms);
 
