From 16d781bdf3b9dfe5da6f4760815ff59e5a80f724 Mon Sep 17 00:00:00 2001
From: Dimitrios Apostolou <dimitrios.apostolou@cfengine.com>
Date: Mon, 29 Feb 2016 18:25:54 +0100
Subject: [PATCH] Change MapInsert() to return bool, depending on the value
 already existing in the Map.

(cherry picked from commit 0e17a727ed8d5cf07a5ad562c0a4c928c9a28d8b)
---
 libutils/array_map.c      |  8 ++++----
 libutils/array_map_priv.h |  9 ++++++---
 libutils/hash_map.c       |  3 +++
 libutils/map.c            | 18 ++++++++++--------
 libutils/map.h            | 13 ++++++++-----
 tests/unit/map_test.c     | 24 ++++++++++++------------
 6 files changed, 43 insertions(+), 32 deletions(-)

diff --git a/libutils/array_map.c b/libutils/array_map.c
index 5a1bab7..7f25a1f 100644
--- a/libutils/array_map.c
+++ b/libutils/array_map.c
@@ -41,11 +41,11 @@ ArrayMap *ArrayMapNew(MapKeyEqualFn equal_fn,
     return map;
 }
 
-bool ArrayMapInsert(ArrayMap *map, void *key, void *value)
+int ArrayMapInsert(ArrayMap *map, void *key, void *value)
 {
     if (map->size == TINY_LIMIT)
     {
-        return false;
+        return 0;
     }
 
     for (int i = 0; i < map->size; ++i)
@@ -55,12 +55,12 @@ bool ArrayMapInsert(ArrayMap *map, void *key, void *value)
             map->destroy_key_fn(key);
             map->destroy_value_fn(map->values[i].value);
             map->values[i].value = value;
-            return true;
+            return 1;
         }
     }
 
     map->values[map->size++] = (MapKeyValue) { key, value };
-    return true;
+    return 2;
 }
 
 bool ArrayMapRemove(ArrayMap *map, const void *key)
diff --git a/libutils/array_map_priv.h b/libutils/array_map_priv.h
index 3a98767..2218543 100644
--- a/libutils/array_map_priv.h
+++ b/libutils/array_map_priv.h
@@ -46,10 +46,13 @@ ArrayMap *ArrayMapNew(MapKeyEqualFn equal_fn,
                       MapDestroyDataFn destroy_key_fn,
                       MapDestroyDataFn destroy_value_fn);
 
-/*
- * Returns false if the limit of the array size has been reached.
+/**
+ * @retval 0 if the limit of the array size has been reached,
+ *           and no insertion took place.
+ * @retval 1 if the key was found and the value was replaced.
+ * @retval 2 if the key-value pair was not found and inserted as new.
  */
-bool ArrayMapInsert(ArrayMap *map, void *key, void *value);
+int ArrayMapInsert(ArrayMap *map, void *key, void *value);
 
 bool ArrayMapRemove(ArrayMap *map, const void *key);
 MapKeyValue *ArrayMapGet(const ArrayMap *map, const void *key);
diff --git a/libutils/hash_map.c b/libutils/hash_map.c
index 6117148..1a583b2 100644
--- a/libutils/hash_map.c
+++ b/libutils/hash_map.c
@@ -47,6 +47,9 @@ static unsigned int HashMapGetBucket(const HashMap *map, const void *key)
     return map->hash_fn(key, 0, HASHMAP_BUCKETS);
 }
 
+/**
+ * @retval true if value was preexisting in the map and got replaced.
+ */
 bool HashMapInsert(HashMap *map, void *key, void *value)
 {
     unsigned bucket = HashMapGetBucket(map, key);
diff --git a/libutils/map.c b/libutils/map.c
index a02f75b..c4f556e 100644
--- a/libutils/map.c
+++ b/libutils/map.c
@@ -155,23 +155,25 @@ static void ConvertToHashMap(Map *map)
     map->hash_fn = NULL;
 }
 
-void MapInsert(Map *map, void *key, void *value)
+bool MapInsert(Map *map, void *key, void *value)
 {
     assert(map != NULL);
 
     if (IsArrayMap(map))
     {
-        if (ArrayMapInsert(map->arraymap, key, value))
+        int ret = ArrayMapInsert(map->arraymap, key, value);
+        if (ret != 0)
         {
-            return;
-        }
-        else
-        {
-            ConvertToHashMap(map);
+            /* Return true if value was replaced, false if key-value was
+             * inserted as new. */
+            return (ret == 1);
         }
+
+        /* Does not fit in ArrayMap, must convert to HashMap. */
+        ConvertToHashMap(map);
     }
 
-    HashMapInsert(map->hashmap, key, value);
+    return HashMapInsert(map->hashmap, key, value);
 }
 
 /*
diff --git a/libutils/map.h b/libutils/map.h
index 4ab3a8f..5a501fa 100644
--- a/libutils/map.h
+++ b/libutils/map.h
@@ -38,10 +38,13 @@ Map *MapNew(MapHashFn hash_fn,
             MapDestroyDataFn destroy_key_fn,
             MapDestroyDataFn destroy_value_fn);
 
-/*
+/**
+ * Insert a key-value pair in the map.
  * If the key is in the map, value get replaced. Old value is destroyed.
+ *
+ * @retval true if key exists already.
  */
-void MapInsert(Map *map, void *key, void *value);
+bool MapInsert(Map *map, void *key, void *value);
 
 /*
  * Returns whether the key is in the map.
@@ -117,7 +120,7 @@ void MapPrintStats(const Map *map, FILE *f);
     } Prefix##Map;                                                      \
                                                                         \
     Prefix##Map *Prefix##MapNew(void);                                  \
-    void Prefix##MapInsert(const Prefix##Map *map, KeyType key, ValueType value); \
+    bool Prefix##MapInsert(const Prefix##Map *map, KeyType key, ValueType value); \
     bool Prefix##MapHasKey(const Prefix##Map *map, const KeyType key);  \
     ValueType Prefix##MapGet(const Prefix##Map *map, const KeyType key); \
     bool Prefix##MapRemove(const Prefix##Map *map, const KeyType key);  \
@@ -139,9 +142,9 @@ void MapPrintStats(const Map *map, FILE *f);
         return map;                                                     \
     }                                                                   \
                                                                         \
-    void Prefix##MapInsert(const Prefix##Map *map, KeyType key, ValueType value) \
+    bool Prefix##MapInsert(const Prefix##Map *map, KeyType key, ValueType value) \
     {                                                                   \
-        MapInsert(map->impl, key, value);                               \
+        return MapInsert(map->impl, key, value);                        \
     }                                                                   \
                                                                         \
     bool Prefix##MapHasKey(const Prefix##Map *map, const KeyType key)   \
diff --git a/tests/unit/map_test.c b/tests/unit/map_test.c
index 533c5ac..c207070 100644
--- a/tests/unit/map_test.c
+++ b/tests/unit/map_test.c
@@ -26,22 +26,22 @@ static void test_insert(void)
     StringMap *map = StringMapNew();
 
     assert_false(StringMapHasKey(map, "one"));
-    StringMapInsert(map, xstrdup("one"), xstrdup("first"));
+    assert_false(StringMapInsert(map, xstrdup("one"), xstrdup("first")));
     assert_true(StringMapHasKey(map, "one"));
     assert_int_equal(StringMapSize(map), 1);
-    StringMapInsert(map, xstrdup("one"), xstrdup("duplicate"));
+    assert_true(StringMapInsert(map, xstrdup("one"), xstrdup("duplicate")));
     assert_int_equal(StringMapSize(map), 1);
 
     assert_false(StringMapHasKey(map, "two"));
-    StringMapInsert(map, xstrdup("two"), xstrdup("second"));
+    assert_false(StringMapInsert(map, xstrdup("two"), xstrdup("second")));
     assert_true(StringMapHasKey(map, "two"));
     assert_int_equal(StringMapSize(map), 2);
 
     assert_false(StringMapHasKey(map, "third"));
-    StringMapInsert(map, xstrdup("third"), xstrdup("first"));
+    assert_false(StringMapInsert(map, xstrdup("third"), xstrdup("first")));
     assert_true(StringMapHasKey(map, "third"));
 
-    StringMapInsert(map, xstrdup("third"), xstrdup("stuff"));
+    assert_true(StringMapInsert(map, xstrdup("third"), xstrdup("stuff")));
     assert_true(StringMapHasKey(map, "third"));
     assert_int_equal(StringMapSize(map), 3);
 
@@ -70,7 +70,7 @@ static void test_insert_jumbo(void)
         s[i] = '\0';
 
         assert_false(StringMapHasKey(jumbo_map, s));
-        StringMapInsert(jumbo_map, xstrdup(s), xstrdup(s));
+        assert_false(StringMapInsert(jumbo_map, xstrdup(s), xstrdup(s)));
         assert_true(StringMapHasKey(jumbo_map, s));
         /* free(s); */
     }
@@ -98,7 +98,7 @@ static void test_get(void)
 {
     StringMap *map = StringMapNew();
 
-    StringMapInsert(map, xstrdup("one"), xstrdup("first"));
+    assert_false(StringMapInsert(map, xstrdup("one"), xstrdup("first")));
     assert_string_equal(StringMapGet(map, "one"), "first");
     assert_int_equal(StringMapGet(map, "two"), NULL);
 
@@ -109,11 +109,11 @@ static void test_has_key(void)
 {
     StringMap *map = StringMapNew();
 
-    StringMapInsert(map, xstrdup("one"), xstrdup("first"));
+    assert_false(StringMapInsert(map, xstrdup("one"), xstrdup("first")));
     assert_true(StringMapHasKey(map, "one"));
 
     assert_false(StringMapHasKey(map, NULL));
-    StringMapInsert(map, NULL, xstrdup("null"));
+    assert_false(StringMapInsert(map, NULL, xstrdup("null")));
     assert_true(StringMapHasKey(map, NULL));
 
     StringMapDestroy(map);
@@ -123,7 +123,7 @@ static void test_clear(void)
 {
     StringMap *map = StringMapNew();
 
-    StringMapInsert(map, xstrdup("one"), xstrdup("first"));
+    assert_false(StringMapInsert(map, xstrdup("one"), xstrdup("first")));
     assert_true(StringMapHasKey(map, "one"));
 
     StringMapClear(map);
@@ -139,7 +139,7 @@ static void test_soft_destroy(void)
     char *key = xstrdup("one");
     char *value = xstrdup("first");
 
-    StringMapInsert(map, key, value);
+    assert_false(StringMapInsert(map, key, value));
     assert_true(StringMapHasKey(map, "one"));
     assert_string_equal(StringMapGet(map, "one"),"first");
 
@@ -185,7 +185,7 @@ static void test_hashmap_degenerate_hash_fn(void)
 
     for (int i = 0; i < 100; i++)
     {
-        HashMapInsert(hashmap, CharTimes('a', i), CharTimes('a', i));
+        assert_false(HashMapInsert(hashmap, CharTimes('a', i), CharTimes('a', i)));
     }
 
     MapKeyValue *item = HashMapGet(hashmap, "aaaa");
