diff -upr cfengine-3.7.1/cf-agent/verify_files_utils.c cfengine-3.7.1-b/cf-agent/verify_files_utils.c
--- cfengine-3.7.1/cf-agent/verify_files_utils.c	2015-12-17 13:13:26.148402171 +0100
+++ cfengine-3.7.1-b/cf-agent/verify_files_utils.c	2015-12-17 13:13:11.869203762 +0100
@@ -823,10 +823,11 @@ static PromiseResult SourceSearchAndCopy
         /* This sends 1st STAT command. */
         if (!ConsiderAbstractFile(dirp->d_name, from, attr.copy, conn))
         {
-            if (conn != NULL && conn->conn_info->is_broken)
+            if (conn != NULL &&
+                conn->conn_info->status != CONNECTIONINFO_STATUS_ESTABLISHED)
             {
                 cfPS(ctx, LOG_LEVEL_INFO, PROMISE_RESULT_INTERRUPTED, pp,
-                     attr, "connection timeout");
+                     attr, "connection error");
                 return PROMISE_RESULT_INTERRUPTED;
             }
             else
@@ -863,10 +864,11 @@ static PromiseResult SourceSearchAndCopy
             if (cf_stat(newfrom, &sb, attr.copy, conn) == -1)
             {
                 Log(LOG_LEVEL_VERBOSE, "Can't stat '%s'. (cf_stat: %s)", newfrom, GetErrorStr());
-                if (conn != NULL && conn->conn_info->is_broken)
+                if (conn != NULL &&
+                    conn->conn_info->status != CONNECTIONINFO_STATUS_ESTABLISHED)
                 {
                     cfPS(ctx, LOG_LEVEL_INFO, PROMISE_RESULT_INTERRUPTED, pp,
-                         attr, "connection timeout");
+                         attr, "connection error");
                     return PROMISE_RESULT_INTERRUPTED;
                 }
                 else
@@ -880,11 +882,12 @@ static PromiseResult SourceSearchAndCopy
             if (cf_lstat(newfrom, &sb, attr.copy, conn) == -1)
             {
                 Log(LOG_LEVEL_VERBOSE, "Can't stat '%s'. (cf_stat: %s)", newfrom, GetErrorStr());
-                if (conn != NULL && conn->conn_info->is_broken)
+                if (conn != NULL &&
+                    conn->conn_info->status != CONNECTIONINFO_STATUS_ESTABLISHED)
                 {
                     cfPS(ctx, LOG_LEVEL_INFO,
                          PROMISE_RESULT_INTERRUPTED, pp, attr,
-                         "connection timeout");
+                         "connection error");
                     return PROMISE_RESULT_INTERRUPTED;
                 }
                 else
@@ -1060,10 +1063,11 @@ static PromiseResult VerifyCopy(EvalCont
             if (!ConsiderAbstractFile(dirp->d_name, sourcedir,
                                       attr.copy, conn))
             {
-                if (conn != NULL && conn->conn_info->is_broken)
+                if (conn != NULL &&
+                    conn->conn_info->status != CONNECTIONINFO_STATUS_ESTABLISHED)
                 {
                     cfPS(ctx, LOG_LEVEL_INFO, PROMISE_RESULT_INTERRUPTED,
-                         pp, attr, "connection timeout");
+                         pp, attr, "connection error");
                     return PROMISE_RESULT_INTERRUPTED;
                 }
                 else
diff -upr cfengine-3.7.1/libcfnet/connection_info.h cfengine-3.7.1-b/libcfnet/connection_info.h
--- cfengine-3.7.1/libcfnet/connection_info.h	2015-12-17 13:13:26.148402171 +0100
+++ cfengine-3.7.1-b/libcfnet/connection_info.h	2015-12-17 13:13:11.869203762 +0100
@@ -37,13 +37,15 @@
  */
 
 /**
-  @brief States of the connection.
-  @note  Status of the connection so we can detect if we need to negotiate a new connection or not
-  */
+ * @brief Status of the connection, for the connection cache and for
+ *        propagating errors up in function callers.
+ */
 typedef enum
 {
     CONNECTIONINFO_STATUS_NOT_ESTABLISHED,
-    CONNECTIONINFO_STATUS_ESTABLISHED
+    CONNECTIONINFO_STATUS_ESTABLISHED,
+    /* used to propagate connection errors up in function calls */
+    CONNECTIONINFO_STATUS_BROKEN
     /* TODO ESTABLISHED==IDLE, BUSY, OFFLINE */
 } ConnectionStatus;
 
@@ -56,7 +58,6 @@ struct ConnectionInfo {
     socklen_t ss_len;
     struct sockaddr_storage ss;
     bool is_call_collect;       /* Maybe replace with a bitfield later ... */
-    bool is_broken; /* used to propagate connection errors up in function calls */
 };
 
 typedef struct ConnectionInfo ConnectionInfo;
Only in cfengine-3.7.1-b/libcfnet: connection_info.h.orig
diff -upr cfengine-3.7.1/libcfnet/net.c cfengine-3.7.1-b/libcfnet/net.c
--- cfengine-3.7.1/libcfnet/net.c	2015-12-17 13:13:26.149402185 +0100
+++ cfengine-3.7.1-b/libcfnet/net.c	2015-12-17 13:13:11.869203762 +0100
@@ -151,7 +151,7 @@ int ReceiveTransaction(ConnectionInfo *c
          * with files.
          * In order to make sure that file transfer is reliable we have to
          * close connection to avoid broken packages being received. */
-        conn_info->is_broken = true;
+        conn_info->status = CONNECTIONINFO_STATUS_BROKEN;
         return ret;
     }
     else if (ret != CF_INBAND_OFFSET)
@@ -159,7 +159,7 @@ int ReceiveTransaction(ConnectionInfo *c
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: bogus short header (%d bytes: '%s')",
             ret, proto);
-        conn_info->is_broken = true;
+        conn_info->status = CONNECTIONINFO_STATUS_BROKEN;
         return -1;
     }
 
@@ -173,21 +173,21 @@ int ReceiveTransaction(ConnectionInfo *c
     {
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: bogus header: %s", proto);
-        conn_info->is_broken = true;
+        conn_info->status = CONNECTIONINFO_STATUS_BROKEN;
         return -1;
     }
     if (status != CF_MORE && status != CF_DONE)
     {
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: bogus header (more='%c')", status);
-        conn_info->is_broken = true;
+        conn_info->status = CONNECTIONINFO_STATUS_BROKEN;
         return -1;
     }
     if (len > CF_BUFSIZE - CF_INBAND_OFFSET)
     {
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: packet too long (len=%d)", len);
-        conn_info->is_broken = true;
+        conn_info->status = CONNECTIONINFO_STATUS_BROKEN;
         return -1;
     }
     else if (len <= 0)
@@ -196,7 +196,7 @@ int ReceiveTransaction(ConnectionInfo *c
          * ReceiveTransaction() == 0 currently means connection closed. */
         Log(LOG_LEVEL_ERR,
             "ReceiveTransaction: packet too short (len=%d)", len);
-        conn_info->is_broken = true;
+        conn_info->status = CONNECTIONINFO_STATUS_BROKEN;
         return -1;
     }
 
@@ -233,7 +233,7 @@ int ReceiveTransaction(ConnectionInfo *c
 
     if (ret <= 0)
     {
-        conn_info->is_broken = true;
+        conn_info->status = CONNECTIONINFO_STATUS_BROKEN;
         return ret;
     }
     else if (ret != len)
@@ -243,7 +243,7 @@ int ReceiveTransaction(ConnectionInfo *c
         Log(LOG_LEVEL_ERR,
             "Partial transaction read %d != %d bytes!",
             ret, len);
-        conn_info->is_broken = true;
+        conn_info->status = CONNECTIONINFO_STATUS_BROKEN;
         return -1;
     }
 
Only in cfengine-3.7.1-b/libcfnet: net.c.orig
