#!/bin/sh
# postinst script for normation-openldap-framework
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
  configure)
    if type systemctl >/dev/null 2>&1; then
      POSTGRESQL_SERVICE_NAME=$(systemctl list-unit-files --type service | awk -F'.' '{print $1}' | grep -E "^postgresql[0-9]*$" | tail -n 1)
    elif type chkconfig >/dev/null 2>&1; then
      POSTGRESQL_SERVICE_NAME=$(chkconfig 2>/dev/null | awk '{ print $1 }' | grep "postgresql" | tail -n 1)
    else
      POSTGRESQL_SERVICE_NAME=$(ls -1 /etc/init.d | grep "postgresql" | tail -n 1)
    fi

    #Check if PostgreSQL is started
    service ${POSTGRESQL_SERVICE_NAME} status > /dev/null

    if [ $? -ne 0 ]
    then
      service ${POSTGRESQL_SERVICE_NAME} start >/dev/null 2>&1
    fi

    echo -n "INFO: Waiting for PostgreSQL to be up..."
    CPT=0
    TIMEOUT=60
    while ! su - postgres -c "psql -q --output /dev/null -c \"SELECT COUNT(*) FROM pg_catalog.pg_authid\"" >/dev/null 2>&1
    do
      echo -n "."
      sleep 1
      CPT=$((${CPT}+1))
      if [ ${CPT} -eq ${TIMEOUT} ]
      then
        echo -e "\nERROR: Connection to PostgreSQL has not been established before timeout. Exiting"
        exit 1
      fi
    done
    echo " Done"

    DBNAME="rudder"
    USERNAME="rudder"
    CHK_PG_DB=$(su - postgres -c "psql -t -c \"select count(1) from pg_catalog.pg_database where datname = '${DBNAME}'\"")
    CHK_PG_USER=$(su - postgres -c "psql -t -c \"select count(1) from pg_user where usename = '${USERNAME}'\"")

    # Rudder user
    if [ ${CHK_PG_USER} -eq 0 ]
    then
      echo -n "INFO: Creating Rudder PostgreSQL user..."
      su - postgres -c "psql -q -c \"CREATE USER ${USERNAME} WITH PASSWORD 'Normation'\"" >/dev/null 2>&1
      echo "Done"
    fi

    # Rudder database
    if [ ${CHK_PG_DB} -eq 0 ]
    then
      echo -n "INFO: Creating Rudder PostgreSQL database..."
      su - postgres -c "psql -q -c \"CREATE DATABASE ${DBNAME} WITH OWNER = ${USERNAME}\"" >/dev/null 2>&1
      echo "localhost:5432:${DBNAME}:${USERNAME}:Normation" > /root/.pgpass
      chmod 600 /root/.pgpass
      psql -q -U rudder -h localhost -d rudder -f /opt/rudder/etc/postgresql/reportsSchema.sql  >/dev/null 2>&1
      echo " Done"
  fi
  ;;
  abort-upgrade|abort-remove|abort-deconfigure)
  ;;
  *)
    echo "postinst called with unknown argument \`$1'" >&2
    exit 1
  ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
