#!/bin/bash
set -e

# check if a db is configured
if [ -f /opt/rudder/etc/rudder-web.properties ] && grep -q rudder.jdbc.url /opt/rudder/etc/rudder-web.properties
then
  # if it is an external DB, do not run
  if ! grep -qE 'rudder.jdbc.url=jdbc:postgresql://(localhost|127\.0\.)' /opt/rudder/etc/rudder-web.properties
  then
    echo "INFO: External database detected, skipping rudder-reports postinst"
    exit 0
  fi
fi

DB_NOT_INITIALIZED="$1"

LOG_FILE="/var/log/rudder/install/rudder-reports-$(date +%Y%m%d%H%M%S).log"

mkdir -p /var/log/rudder/install

echo "$(date) - Starting rudder-reports post installation script" >> ${LOG_FILE}

# Try with systemd
POSTGRESQL_SERVICE_NAME=$(systemctl list-unit-files --type service | awk -F'.' '{print $1}' | grep -E "^postgresql-?[0-9]*$" | tail -n 1)

if [ -z "${POSTGRESQL_SERVICE_NAME}" ] && ! type chkconfig >/dev/null 2>/dev/null ; then
  # on sles 12 postgresql uses an old init file but is properly managed by systemd so this is the only place we need a workaround
  POSTGRESQL_SERVICE_NAME=$(chkconfig 2>/dev/null | awk '{ print $1 }' | grep "postgresql" | tail -n 1)
fi

# If nothin try default name (should not happen)
if [ -z "${POSTGRESQL_SERVICE_NAME}" ]; then
  POSTGRESQL_SERVICE_NAME="postgresql"
fi

# Start if necessary
if ! systemctl status ${POSTGRESQL_SERVICE_NAME} > /dev/null
then
  if [ "${DB_NOT_INITIALIZED}" != "" ]; then
    # Detecting path of postgresql-setup
    POSTGRESQL_SETUP=$(ls -1  /usr/pgsql-*/bin/postgresql*-setup 2> /dev/null | sort -V | tail -1)
    if [ -z "${POSTGRESQL_SETUP}" ]; then
      POSTGRESQL_SETUP="postgresql-setup"
    fi

    # rhel package doesn't initialize database
    ${POSTGRESQL_SETUP} initdb >> ${LOG_FILE}
  fi
  systemctl start ${POSTGRESQL_SERVICE_NAME} >> ${LOG_FILE}
fi

# TODO RPM only ??
  PG_HBA_FILE=$(su postgres -c "psql -t -P format=unaligned -c 'show hba_file';")
  if [ $? -ne 0 ]; then
    echo "Postgresql failed to start! Halting"
    exit 1
  fi
  
  #HACK: Give rights for login without unix account
  if [ -f ${PG_HBA_FILE} ]; then
    RUDDER_PG_DEFINED=`grep "rudder" ${PG_HBA_FILE} | wc -l`
    if [ ${RUDDER_PG_DEFINED} -le 0 ]; then
      # we cannot put at the bottom the rules
      # Check that the defining line for file is there
      grep -q "^# TYPE" ${PG_HBA_FILE}
      if [ $? -eq 0 ]; then
        sed -i  '/^# TYPE.*/a # Rudder specific access for PostgreSQL' ${PG_HBA_FILE}
      else
        # Put it on top
        sed -i 1i"# Rudder specific access for PostgreSQL" ${PG_HBA_FILE}
      fi
      sed -i  '/^# Rudder specific access for PostgreSQL/a host    all             rudder          127.0.0.1/32            md5' ${PG_HBA_FILE}
      sed -i  '/^# Rudder specific access for PostgreSQL/a host    all             rudder             ::1/128              md5' ${PG_HBA_FILE}
  
      # Apply changes in PostgreSQL
      # TODO just after a start ?
      systemctl reload ${POSTGRESQL_SERVICE_NAME} >> ${LOG_FILE}
    fi
  fi
# ODOT

# RHEL doesn't autostart service
systemctl enable ${POSTGRESQL_SERVICE_NAME} >> ${LOG_FILE} 2>&1

CPT=0
TIMEOUT=60
while ! su postgres -c "psql -q --output /dev/null -c \"SELECT COUNT(*) FROM pg_catalog.pg_authid\"" >/dev/null 2>&1
do
  echo -n "."
  sleep 1
  CPT=$((${CPT}+1))
  if [ ${CPT} -eq ${TIMEOUT} ]
  then
    echo -e "\nERROR: Connection to PostgreSQL has not been established before timeout. Exiting"
    exit 1
  fi
done

DBNAME="rudder"
USERNAME="rudder"
CHK_PG_DB=$(su postgres -c "psql -t -c \"select count(1) from pg_catalog.pg_database where datname = '${DBNAME}'\"")
CHK_PG_USER=$(su postgres -c "psql -t -c \"select count(1) from pg_user where usename = '${USERNAME}'\"")

# Rudder user
if [ ${CHK_PG_USER} -eq 0 ]
then
  su postgres -c "psql -q -c \"CREATE USER ${USERNAME} WITH PASSWORD 'Normation'\"" >> ${LOG_FILE}
fi

# Rudder database
if [ ${CHK_PG_DB} -eq 0 ]
then
  su postgres -c "psql -q -c \"CREATE DATABASE ${DBNAME} WITH OWNER = ${USERNAME}\"" >> ${LOG_FILE}
  echo "localhost:5432:${DBNAME}:${USERNAME}:Normation" > /root/.pgpass
  chmod 600 /root/.pgpass
  psql -q -U rudder -h localhost -d rudder -f /opt/rudder/etc/postgresql/reportsSchema.sql >> ${LOG_FILE}
fi

echo "$(date) - Ending rudder-reports post installation script" >> ${LOG_FILE}
