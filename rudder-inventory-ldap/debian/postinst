#!/bin/sh
# postinst script for rudder-inventory-ldap
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)
		invoke-rc.d rsyslog restart

		RUDDER_SHARE=/opt/rudder/share
		RUDDER_UPGRADE_TOOLS=${RUDDER_SHARE}/upgrade-tools
		BACKUP_LDIF_PATH=/var/rudder/ldap/backup/
		BACKUP_LDIF_REGEX="^/var/rudder/ldap/backup/openldap-data-pre-upgrade-\([0-9]\{14\}\)\.ldif$"

		# Do we have a backup file from a previous upgrade?
		BACKUP_LDIF=`find ${BACKUP_LDIF_PATH} -regextype sed -regex "${BACKUP_LDIF_REGEX}" | sort -nr | head -n1`
		if [ "z${BACKUP_LDIF}" != "z" ]; then
			TIMESTAMP=`echo ${BACKUP_LDIF} | sed "s%${BACKUP_LDIF_REGEX}%\1%"`


			# If this is an upgrade from an older version of rudder-inventory-ldap
			# we may need to drop and reimport the database if the underlying version
			# of libdb has changed.
			if [ -f /var/rudder/ldap/backup/openldap-data-pre-upgrade-${TIMESTAMP}.libdb-version ]; then
				# Did the underlying version of libdb change?
				current_libdb_version=$(echo `ldd /opt/rudder/sbin/slapcat | grep libdb | cut -d"=" -f1`)
				previous_libdb_version=`cat /var/rudder/ldap/backup/openldap-data-pre-upgrade-${TIMESTAMP}.libdb-version`
				if [ ${current_libdb_version} != ${previous_libdb_version} ]; then
					# OK, we need to remove the old DB and import the backup
					REINIT_DB="yes"
				fi
			fi


			if [ "z${REINIT_DB}" = "zyes" ]; then
				# Do we have a database backup to restore from?
				if [ ! -f ${BACKUP_LDIF} ]; then
					echo >&2 "No database backup for old version. Can't upgrade rudder-inventory-ldap database!"
					exit 1
				fi

				# Stop OpenLDAP - use forcestop to avoid the init script failing
				# when trying to do the backup with bad libdb versions
				invoke-rc.d slapd forcestop

				# Backup the old database
				LDAP_BACKUP_DIR="/var/rudder/ldap/openldap-data-backup-upgrade-on-${TIMESTAMP}/"
				mkdir -p "${LDAP_BACKUP_DIR}"
				find /var/rudder/ldap/openldap-data -maxdepth 1 -mindepth 1 -not -name "DB_CONFIG" -exec mv {} ${LDAP_BACKUP_DIR} \;

				# Import the backed up database
				/opt/rudder/sbin/slapadd -q -l ${BACKUP_LDIF}

				# Start OpenLDAP
				invoke-rc.d slapd start

				echo "OpenLDAP database was successfully upgraded to new format"
				echo "You can safely remove the backups in ${LDAP_BACKUP_DIR}"
				echo "and ${BACKUP_LDIF}"

			fi
		fi

		# Do we need to reindex the LDAP database? This can be necessary if the indexes were changed. Let's check.
		SLAPD_DEFINED_INDEXES=$(mktemp)
		SLAPD_ACTUAL_INDEXES=$(mktemp)
		if [ -r /opt/rudder/etc/openldap/slapd.conf -a -e /var/rudder/ldap/openldap-data/id2entry.bdb ]; then
			grep ^index /opt/rudder/etc/openldap/slapd.conf | sed 's/\s\+/\t/g' | cut -f2 | sed 's/,/\n/g' | sort > ${SLAPD_DEFINED_INDEXES}
			ls  /var/rudder/ldap/openldap-data/*.bdb | xargs -n 1 -I{} basename {} .bdb | sort | egrep -v '^(dn2id|id2entry)' > ${SLAPD_ACTUAL_INDEXES}
			if ! diff ${SLAPD_DEFINED_INDEXES} ${SLAPD_ACTUAL_INDEXES} > /dev/null; then
				echo "OpenLDAP indexes are not up to date, reindexing..."
				invoke-rc.d slapd stop
				/opt/rudder/sbin/slapindex
				invoke-rc.d slapd start
				echo "OpenLDAP indexes updated."
			fi
		fi
		# Remove temporary files about LDAP indexes
		rm -f ${SLAPD_DEFINED_INDEXES} ${SLAPD_ACTUAL_INDEXES}
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
