#!/bin/sh
# postinst script for rudder-inventory-ldap
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)
    echo -n "INFO: Restarting syslogd..."
    invoke-rc.d rsyslog restart >/dev/null 2>&1
    echo " Done"

    # Reload the linker cache (to acknowledge BerkeleyDB's presence if needed)
    if [ -e /etc/ld.so.conf.d/rudder-inventory-ldap.conf ]; then
      ldconfig
    fi

    RUDDER_SHARE=/opt/rudder/share
    RUDDER_UPGRADE_TOOLS=${RUDDER_SHARE}/upgrade-tools
    BACKUP_LDIF_PATH=/var/rudder/ldap/backup/
    BACKUP_LDIF_REGEX="^/var/rudder/ldap/backup/openldap-data-pre-upgrade-\([0-9]\{14\}\)\.ldif$"

    # Do we have a backup file from a previous upgrade?
    BACKUP_LDIF=$(find ${BACKUP_LDIF_PATH} -regextype sed -regex "${BACKUP_LDIF_REGEX}" 2>&1 | sort -nr | head -n1)
    if [ -n "${BACKUP_LDIF}" ]; then
      TIMESTAMP=$(echo ${BACKUP_LDIF} | sed "s%${BACKUP_LDIF_REGEX}%\1%")


      # If this is an upgrade from an older version of rudder-inventory-ldap
      # we may need to drop and reimport the database if the underlying version
      # of libdb has changed.
      if [ -f "/var/rudder/ldap/backup/openldap-data-pre-upgrade-${TIMESTAMP}.libdb-version" ]; then
        # Did the underlying version of libdb change?
        current_libdb_version=$(ldd /opt/rudder/sbin/slapcat | grep libdb | cut -d"=" -f1)
        previous_libdb_version=$(cat /var/rudder/ldap/backup/openldap-data-pre-upgrade-${TIMESTAMP}.libdb-version)
        if [ "${current_libdb_version}" != "${previous_libdb_version}" ]; then
          # OK, we need to remove the old DB and import the backup
          REINIT_DB="yes"
        fi
      fi

      if [ "${REINIT_DB}" = "yes" ]; then

        # Do we have a database backup to restore from?
        if [ ! -f ${BACKUP_LDIF} ]; then
          echo >&2 "ERROR: No database backup for old version. Can't upgrade rudder-inventory-ldap database..."
          exit 1
        fi

        # Stop OpenLDAP - use forcestop to avoid the init script failing
        # when trying to do the backup with bad libdb versions
        echo -n "INFO: Stopping rudder-slapd..."
        invoke-rc.d rudder-slapd forcestop >/dev/null 2>&1
        echo " Done"

        # Backup the old database
        LDAP_BACKUP_DIR="/var/rudder/ldap/openldap-data-backup-upgrade-on-${TIMESTAMP}/"
        mkdir -p "${LDAP_BACKUP_DIR}"
        find /var/rudder/ldap/openldap-data -maxdepth 1 -mindepth 1 -not -name "DB_CONFIG" -exec mv {} ${LDAP_BACKUP_DIR} \;

        # Import the backed up database
        /opt/rudder/sbin/slapadd -q -l ${BACKUP_LDIF}

        # Start OpenLDAP
        echo -n "INFO: Starting rudder-slapd..."
        invoke-rc.d rudder-slapd start >/dev/null 2>&1
        echo " Done"

        echo "INFO: OpenLDAP database was successfully upgraded to new format"

        if [ -x /opt/rudder/bin/rudder-upgrade ]
        then
          echo "INFO: Running the Rudder upgrade script to replay LDAP migrations on the old database content..."
          /opt/rudder/bin/rudder-upgrade
        fi

        echo "INFO: You can safely remove the backups in ${LDAP_BACKUP_DIR}"
        echo "INFO: and ${BACKUP_LDIF}"

      fi
    fi

    # Restart rudder-slapd to take schema changes into account
    echo -n "INFO: Restarting rudder-slapd..."
    invoke-rc.d rudder-slapd restart >/dev/null 2>&1
    echo " Done"

    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
