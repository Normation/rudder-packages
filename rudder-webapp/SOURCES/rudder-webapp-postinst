#!/bin/bash

set -e

# Is this the first installation?
RUDDER_FIRST_INSTALL="$1"
APACHE="$2"
LOG_FILE="/var/log/rudder/install/rudder-webapp-$(date +%Y%m%d%H%M%S).log"
LDAP_CONF="/opt/rudder/etc/openldap/slapd.conf"

mkdir -p /var/log/rudder/install

echo "$(date) - Starting rudder-webapp post installation script" >> ${LOG_FILE}

echo -n "INFO: Creating groups ..."
if ! getent group rudder-slapd >/dev/null; then
  groupadd --system rudder-slapd >> ${LOG_FILE}
fi
if ! getent group ncf-api-venv >/dev/null; then
  groupadd --system ncf-api-venv >> ${LOG_FILE}
fi

echo -n "INFO: Creating users ..."
if ! getent passwd rudder-slapd >/dev/null; then
  useradd --system --gid rudder-slapd --shell /bin/false --home-dir /var/rudder/ldap --comment "Rudder LDAP server,,," rudder-slapd >> ${LOG_FILE}
fi
chown root:rudder-slapd "${LDAP_CONF}"
chmod 640 "${LDAP_CONF}"
chown -R rudder-slapd:rudder-slapd /var/rudder/ldap/

if ! getent passwd ncf-api-venv >/dev/null; then
  useradd --system --gid ncf-api-venv --shell /bin/false --home-dir /var/lib/ncf-api-venv --groups rudder --comment "ncf API,,," ncf-api-venv >> ${LOG_FILE}
fi
chown -R ncf-api-venv:ncf-api-venv /var/lib/ncf-api-venv

echo " Done"

echo -n "INFO: Setting up systemd ..."
systemctl daemon-reload

systemctl enable rudder-jetty >> ${LOG_FILE}
systemctl enable rudder-slapd >> ${LOG_FILE}

# Remove pidfile and argsfile
sed -i '/^[ \t]*pidfile/d' "${LDAP_CONF}"
sed -i '/^[ \t]*argsfile/d' "${LDAP_CONF}"

# Migration from pre-6.0, moving inventory-web properties to rudder-web properties
INVENTORY_PROP="/opt/rudder/etc/inventory-web.properties"
RUDDER_PROP="/opt/rudder/etc/rudder-web.properties"
if [ -f "${INVENTORY_PROP}" ]
then
  cat >> "${RUDDER_PROP}" << EOF

#
# Max number of reports waiting to be processed internally.
# For a rough estimation, you can consider that a report in queue
# takes 5 MB, so to handle 50 (default), the application will
# need around 250 MB of spare memory.
#
EOF
  grep "^waiting" "${INVENTORY_PROP}" >> "${RUDDER_PROP}" || true
  cat >> "${RUDDER_PROP}" << EOF

#
# Rudder 5.0.5 introduce a file watcher which react to new
# inventories put in \${inventories.root.directory}/incoming.
# You can (should) use the watcher by setting the property
# 'inventories.watcher.enable' to true.
# 'inventories.watcher.waitForSignatureDuration' is the time
# in seconds the watcher will wait for the signature file
# in case there is only an inventory file before sending
# only inventory to backend.
# You can start (resp. stop) the watcher with POST to API
# /api/watcher/start (resp /api/watcher/stop).
#
EOF
  grep "^inventory" "${INVENTORY_PROP}" >> "${RUDDER_PROP}" || true
  rm "${INVENTORY_PROP}"
fi

# Need to restart to take schema changes into account
echo -n "INFO: Restarting rudder-slapd..."

# during upgrade, service may not have been started with systemctl
# detect first if rudder-slapd is seen running ?
RUDDER_SLAPD_RUNNING_SERVICE=0
RUDDER_SLAPD_RUNNING_SYSTEMCTL=0
if service rudder-slapd status > /dev/null; then 
  RUDDER_SLAPD_RUNNING_SERVICE=1
fi
if systemctl is-active rudder-slapd > /dev/null; then 
  RUDDER_SLAPD_RUNNING_SYSTEMCTL=1
fi

if [ $RUDDER_SLAPD_RUNNING_SERVICE -eq 1 ] && [ $RUDDER_SLAPD_RUNNING_SYSTEMCTL -eq 0 ]
then
  # systemctl doesn't know the service is started, we stop it with service first
  service rudder-slapd stop >> ${LOG_FILE}
fi

systemctl restart rudder-slapd >> ${LOG_FILE}
echo " Done"


# Enable the conf-available entry if possible
a2enconf ncf-api-virtualenv  >> ${LOG_FILE} 2>/dev/null || true

# Remove .pyc files to ensure we don't end up with outdated files
rm -f /usr/share/ncf/tools/ncf.pyc
rm -f /usr/share/ncf/tools/ncf_constraints.pyc
rm -f /usr/share/ncf-api-virtualenv/tools/ncf.pyc
rm -f /usr/share/ncf-api-virtualenv/tools/ncf_constraints.pyc

# Add perms on inventories
chmod 751 /var/rudder/inventories

# Create and populate technique store
mkdir -p /var/rudder/configuration-repository/shared-files

if [ ! -d /var/rudder/configuration-repository/techniques ]; then
  cp -a /opt/rudder/share/techniques /var/rudder/configuration-repository/
  touch /opt/rudder/etc/force_technique_reload
fi

# Start with a fresh ncf if needed
if [ ! -d /var/rudder/ncf/common/10_ncf_internals ]; then
  cp -a /usr/share/ncf/tree/* /var/rudder/ncf/common/
fi

# Initialize git repository if it is missing, so permissions can be set on it afterwards
cd /var/rudder/configuration-repository
if [ ! -d /var/rudder/configuration-repository/.git ]; then

  git init --shared=group >> ${LOG_FILE}

  # Specify default git user name and email (git will refuse to commit without them)
  git config user.name "root user (CLI)"
  git config user.email "root@localhost"

  git add .
  git commit -q -m "initial commit"
fi

if [ "${RUDDER_FIRST_INSTALL}" = "true" ]; then
  /opt/rudder/bin/rudder server upgrade-techniques --set-autoupdate-technique-library=true >> ${LOG_FILE}
fi

# Check if Rudder LDAP is initialized and run rudder-init
# sed stops at first match (giving a SIGPIPE to command) so that the slapcat is not too long on big db
# To prevent error "error writing output.", we redirect error of slapcat to /dev/null
LDAPCHK=`/opt/rudder/sbin/slapcat 2>/dev/null | sed -n '/^dn: /{p;q}' | wc -l`
if [ $LDAPCHK -eq 0 ]; then
  /opt/rudder/bin/rudder-init no auto
fi

# Run any upgrades
echo "INFO: Launching script to check if a migration is needed ..."
/opt/rudder/bin/rudder-upgrade >> ${LOG_FILE}
echo "Done"

# Adjust permissions on /var/rudder/configuration-repository
/opt/rudder/bin/rudder-fix-repository-permissions  >> ${LOG_FILE}

# Rudder-lang: generates stdlib.rl and translate_config.toml. Added in version 6.1
/opt/rudder/share/rudder-lang/tools/generate_lib

# Restore the plugins and checking them
# Each step may fail, but we don't want to stop the migration at a plugin failure
if [ -f /tmp/rudder-plugins-upgrade ]
then
  # For 6.0.3 only we disable all installed plugins at install time since they
  # are not compatible
  #rudder package plugin restore-status < /tmp/rudder-plugins-upgrade || true
  #rudder package check-compatibility || true
  echo "********************************************************************************"
  echo "Due to incompatibility reasons for this specific version all plugins have been"
  echo "disabled. Make sure to update your repo index and install the latest version of"
  echo "your plugins before re-enabling them."
  echo ""
  echo "You can use the following commands to upgrade your plugins:"
  echo "rudder package update"
  echo "rudder package upgrade-all"
  echo "********************************************************************************"

  rudder package rudder-postupgrade  || true
fi

cd /
[ -f /tmp/rudder-hooks-upgrade ] && setfacl --restore=/tmp/rudder-hooks-upgrade

# On SLES ncf config has been moved from conf.d to vhosts.d between 5.0 and 6.0
# In case both config are there, clear the old one to avoid breaking apache syntax
[ -f /etc/apache2/vhosts.d/ncf-api-virtualenv.conf ] && [ -f /etc/apache2/conf.d/ncf-api-virtualenv.conf ] && echo '' > /etc/apache2/conf.d/ncf-api-virtualenv.conf

# Restart the webapp
echo -n "INFO: Make sure Rudder webapp is started..."
systemctl restart rudder-jetty >> ${LOG_FILE}
echo " Done"

echo -n "INFO: Make sure Apache HTTPd is started..."
systemctl restart ${APACHE} >> ${LOG_FILE}
echo " Done"

## Make sure everything is ok
if [ "${RUDDER_FIRST_INSTALL}" = "true" ]; then
  rudder agent check -f 2>&1 | tee -a "${LOG_FILE}"
fi

echo "$(date) - Ending rudder-webapp post installation script" >> ${LOG_FILE}
