#!/bin/bash

set -e

# Is this the first installation?
RUDDER_FIRST_INSTALL="$1"
APACHE="$2"
APACHE_USER="$3"
APACHE_GROUP="$4"
LOG_FILE="/var/log/rudder/install/rudder-webapp-$(date +%Y%m%d%H%M%S).log"
LDAP_CONF="/opt/rudder/etc/openldap/slapd.conf"

echo "$(date) - Starting rudder-webapp post installation script" >> ${LOG_FILE}

echo -n "INFO: Creating groups ..."
if ! getent group rudder-slapd >/dev/null; then
  groupadd --system rudder-slapd >> ${LOG_FILE}
fi
if ! getent group ncf-api-venv >/dev/null; then
  groupadd --system ncf-api-venv >> ${LOG_FILE}
fi

echo -n "INFO: Creating users ..."
if ! getent passwd rudder-slapd >/dev/null; then
  useradd --system --gid rudder-slapd --shell /bin/false --home-dir /var/rudder/ldap --comment "Rudder LDAP server,,," rudder-slapd >> ${LOG_FILE}
fi
chown root:rudder-slapd "${LDAP_CONF}"
chmod 640 "${LDAP_CONF}"
chown -R rudder-slapd:rudder-slapd /var/rudder/ldap/

if ! getent passwd ncf-api-venv >/dev/null; then
  useradd --system --gid ncf-api-venv --shell /bin/false --home-dir /var/lib/ncf-api-venv --groups rudder --comment "ncf API,,," ncf-api-venv >> ${LOG_FILE}
fi
chown -R ncf-api-venv:ncf-api-venv /var/lib/ncf-api-venv

echo " Done"

echo -n "INFO: Setting up systemd ..."
systemctl daemon-reload

if [ "${RUDDER_FIRST_INSTALL}" = "true" ]; then
  systemctl enable rudder-jetty >> ${LOG_FILE}
  systemctl enable rudder-slapd >> ${LOG_FILE}
fi
echo " Done"

# Remove pidfile and argsfile
sed -i '/^[ \t]*pidfile/d' "${LDAP_CONF}"
sed -i '/^[ \t]*argsfile/d' "${LDAP_CONF}"

# Migration from pre-5.1, moving settings to slapd.conf
if [ -f /var/rudder/tmp/default-rudder-slapd ]; then
  echo "Starting migration of /etc/default/rudder-slapd" >> ${LOG_FILE}  
  . /var/rudder/tmp/default-rudder-slapd

  if [ ! -z "${RUDDER_MDBSIZE}" ] && [ "${RUDDER_MDBSIZE}" != "auto" ] || [ "${RUDDER_MDBSIZE}" != "noauto" ]; then
    echo "Importing value of RUDDER_MDBSIZE: ${RUDDER_MDBSIZE}" >> ${LOG_FILE}
    sed -i '/^[ \t]*maxsize/d' "${LDAP_CONF}"
    sed -i 's/^\([ \t]*suffix[ \t]\+"cn=rudder-configuration".*\)/\1\nmaxsize '${RUDDER_MDBSIZE}'/' "${LDAP_CONF}"
  fi
  if [ ! -z "${RUDDER_MAX_INCOMING_AUTH}" ]; then
    echo "Importing value of RUDDER_MAX_INCOMING_AUTH: ${RUDDER_MAX_INCOMING_AUTH}" >> ${LOG_FILE}
    sed -i '/^[ \t]*sockbuf_max_incoming_auth/d' "${LDAP_CONF}"
    sed -i 's/^\([ \t]*argsfile[ \t]\+\/.*\)/\1\nsockbuf_max_incoming_auth '${RUDDER_MAX_INCOMING_AUTH}'/' "${LDAP_CONF}"
  fi

  rm -f /etc/default/rudder-slapd /var/rudder/tmp/default-rudder-slapd
fi

# Migration from pre-5.1, moving inventory-web properties to rudder-web properties
INVENTORY_PROP="/opt/rudder/etc/inventory-web.properties"
RUDDER_PROP="/opt/rudder/etc/rudder-web.properties"
if [ -f "${INVENTORY_PROP}" ]
then
  cat >> "${RUDDER_PROP}" << EOF

#
# Max number of reports waiting to be processed internally.
# For a rough estimation, you can consider that a report in queue
# takes 5 MB, so to handle 50 (default), the application will
# need around 250 MB of spare memory.
#
EOF
  grep "^waiting" "${INVENTORY_PROP}" >> "${RUDDER_PROP}"
  cat >> "${RUDDER_PROP}" << EOF

#
# Rudder 5.0.5 introduce a file watcher which react to new
# inventories put in \${inventories.root.directory}/incoming.
# You can (should) use the watcher by setting the property
# 'inventories.watcher.enable' to true.
# 'inventories.watcher.waitForSignatureDuration' is the time
# in seconds the watcher will wait for the signature file
# in case there is only an inventory file before sending
# only inventory to backend.
# You can start (resp. stop) the watcher with POST to API
# /api/watcher/start (resp /api/watcher/stop).
#
EOF
  grep "^inventory" "${INVENTORY_PROP}" >> "${RUDDER_PROP}"
  rm "${INVENTORY_PROP}"
fi

# Need to restart to take schema changes into account
echo -n "INFO: Restarting rudder-slapd..."

# during upgrade, service may not have been started with systemctl
# detect first if rudder-slapd is seen running ?
RUDDER_SLAPD_RUNNING_SERVICE=0
RUDDER_SLAPD_RUNNING_SYSTEMCTL=0
if service rudder-slapd status > /dev/null; then 
  RUDDER_SLAPD_RUNNING_SERVICE=1
fi
if systemctl is-active rudder-slapd > /dev/null; then 
  RUDDER_SLAPD_RUNNING_SYSTEMCTL=1
fi

if [ $RUDDER_SLAPD_RUNNING_SERVICE -eq 1 ] && [ $RUDDER_SLAPD_RUNNING_SYSTEMCTL -eq 0 ]
then
  # systemctl doesn't know the service is started, we stop it with service first
  service rudder-slapd stop >> ${LOG_FILE}
fi


systemctl restart rudder-slapd >> ${LOG_FILE}
echo " Done"


# Enable the conf-available entry if possible
a2enconf ncf-api-virtualenv  >> ${LOG_FILE} 2>/dev/null || true

# Remove .pyc files to ensure we don't end up with outdated files
rm -f /usr/share/ncf/tools/ncf.pyc
rm -f /usr/share/ncf/tools/ncf_constraints.pyc
rm -f /usr/share/ncf-api-virtualenv/tools/ncf.pyc
rm -f /usr/share/ncf-api-virtualenv/tools/ncf_constraints.pyc

# Add perms on inventories
chmod 751 /var/rudder/inventories

# Create and populate technique store
mkdir -p /var/rudder/configuration-repository/shared-files

if [ ! -d /var/rudder/configuration-repository/techniques ]; then
  cp -a /opt/rudder/share/techniques /var/rudder/configuration-repository/
  touch /opt/rudder/etc/force_technique_reload
fi

# Start with a fresh ncf if needed
if [ ! -d /var/rudder/ncf/common/10_ncf_internals ]; then
  cp -a /usr/share/ncf/tree/* /var/rudder/ncf/common/
fi

# Initialize git repository if it is missing, so permissions can be set on it afterwards
cd /var/rudder/configuration-repository
if [ ! -d /var/rudder/configuration-repository/.git ]; then

  git init --shared=group >> ${LOG_FILE}

  # Specify default git user name and email (git will refuse to commit without them)
  git config user.name "root user (CLI)"
  git config user.email "root@localhost"

  git add .
  git commit -q -m "initial commit"
fi

if [ "${RUDDER_FIRST_INSTALL}" = "true" ]; then
  /opt/rudder/bin/rudder server upgrade-techniques --set-autoupdate-technique-library=true >> ${LOG_FILE}
fi

# Check if Rudder LDAP is initialized and run rudder-init
# sed stops at first match (giving a SIGPIPE to command) so that the slapcat is not too long on big db
LDAPCHK=`/opt/rudder/sbin/slapcat | sed -n '/^dn: /{p;q}' | wc -l`
if [ $LDAPCHK -eq 0 ]; then
  /opt/rudder/bin/rudder-init no auto
fi

# Run any upgrades
echo "INFO: Launching script to check if a migration is needed ..."
/opt/rudder/bin/rudder-upgrade >> ${LOG_FILE}
echo "Done"

# Adjust permissions on /var/rudder/configuration-repository
/opt/rudder/bin/rudder-fix-repository-permissions  >> ${LOG_FILE}

if [ -f /tmp/rudder-plugins-upgrade ]
then
  /opt/rudder/bin/rudder-pkg plugin restore-status < /tmp/rudder-plugins-upgrade
fi

cd /
[ -f /tmp/rudder-hooks-upgrade ] && setfacl --restore=/tmp/rudder-hooks-upgrade

# Restart the webapp
echo -n "INFO: Make sure Rudder webapp is started..."
systemctl start rudder-jetty >> ${LOG_FILE}
echo " Done"

echo -n "INFO: Make sure Apache HTTPd is started..."
systemctl start ${APACHE} >> ${LOG_FILE}
echo " Done"

## Make sure everything is ok
rudder agent check -f 2>&1 | tee "${LOG_FILE}"

echo "$(date) - Ending rudder-webapp post installation script" >> ${LOG_FILE}

